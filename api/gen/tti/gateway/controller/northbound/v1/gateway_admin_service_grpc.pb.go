// Copyright Â© 2024 The Things Industries B.V.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: tti/gateway/controller/northbound/v1/gateway_admin_service.proto

package northboundv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GatewayAdminService_Get_FullMethodName    = "/tti.gateway.controller.northbound.v1.GatewayAdminService/Get"
	GatewayAdminService_Update_FullMethodName = "/tti.gateway.controller.northbound.v1.GatewayAdminService/Update"
)

// GatewayAdminServiceClient is the client API for GatewayAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayAdminServiceClient interface {
	Get(ctx context.Context, in *GatewayAdminServiceGetRequest, opts ...grpc.CallOption) (*GatewayAdminServiceGetResponse, error)
	Update(ctx context.Context, in *GatewayAdminServiceUpdateRequest, opts ...grpc.CallOption) (*GatewayAdminServiceUpdateResponse, error)
}

type gatewayAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayAdminServiceClient(cc grpc.ClientConnInterface) GatewayAdminServiceClient {
	return &gatewayAdminServiceClient{cc}
}

func (c *gatewayAdminServiceClient) Get(ctx context.Context, in *GatewayAdminServiceGetRequest, opts ...grpc.CallOption) (*GatewayAdminServiceGetResponse, error) {
	out := new(GatewayAdminServiceGetResponse)
	err := c.cc.Invoke(ctx, GatewayAdminService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAdminServiceClient) Update(ctx context.Context, in *GatewayAdminServiceUpdateRequest, opts ...grpc.CallOption) (*GatewayAdminServiceUpdateResponse, error) {
	out := new(GatewayAdminServiceUpdateResponse)
	err := c.cc.Invoke(ctx, GatewayAdminService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayAdminServiceServer is the server API for GatewayAdminService service.
// All implementations must embed UnimplementedGatewayAdminServiceServer
// for forward compatibility
type GatewayAdminServiceServer interface {
	Get(context.Context, *GatewayAdminServiceGetRequest) (*GatewayAdminServiceGetResponse, error)
	Update(context.Context, *GatewayAdminServiceUpdateRequest) (*GatewayAdminServiceUpdateResponse, error)
	mustEmbedUnimplementedGatewayAdminServiceServer()
}

// UnimplementedGatewayAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayAdminServiceServer struct {
}

func (UnimplementedGatewayAdminServiceServer) Get(context.Context, *GatewayAdminServiceGetRequest) (*GatewayAdminServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGatewayAdminServiceServer) Update(context.Context, *GatewayAdminServiceUpdateRequest) (*GatewayAdminServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGatewayAdminServiceServer) mustEmbedUnimplementedGatewayAdminServiceServer() {}

// UnsafeGatewayAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayAdminServiceServer will
// result in compilation errors.
type UnsafeGatewayAdminServiceServer interface {
	mustEmbedUnimplementedGatewayAdminServiceServer()
}

func RegisterGatewayAdminServiceServer(s grpc.ServiceRegistrar, srv GatewayAdminServiceServer) {
	s.RegisterService(&GatewayAdminService_ServiceDesc, srv)
}

func _GatewayAdminService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayAdminServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAdminServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAdminService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAdminServiceServer).Get(ctx, req.(*GatewayAdminServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAdminService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayAdminServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAdminServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAdminService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAdminServiceServer).Update(ctx, req.(*GatewayAdminServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayAdminService_ServiceDesc is the grpc.ServiceDesc for GatewayAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tti.gateway.controller.northbound.v1.GatewayAdminService",
	HandlerType: (*GatewayAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GatewayAdminService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GatewayAdminService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tti/gateway/controller/northbound/v1/gateway_admin_service.proto",
}
