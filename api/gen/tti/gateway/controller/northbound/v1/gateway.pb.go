// Copyright Â© 2024 The Things Industries B.V.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: tti/gateway/controller/northbound/v1/gateway.proto

package northboundv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GatewaySubscriptionStatus int32

const (
	GatewaySubscriptionStatus_GATEWAY_SUBSCRIPTION_STATUS_UNSPECIFIED        GatewaySubscriptionStatus = 0
	GatewaySubscriptionStatus_GATEWAY_SUBSCRIPTION_STATUS_DETACHED           GatewaySubscriptionStatus = 1
	GatewaySubscriptionStatus_GATEWAY_SUBSCRIPTION_STATUS_ATTACHED_ACTIVE    GatewaySubscriptionStatus = 2
	GatewaySubscriptionStatus_GATEWAY_SUBSCRIPTION_STATUS_ATTACHED_SUSPENDED GatewaySubscriptionStatus = 3
)

// Enum value maps for GatewaySubscriptionStatus.
var (
	GatewaySubscriptionStatus_name = map[int32]string{
		0: "GATEWAY_SUBSCRIPTION_STATUS_UNSPECIFIED",
		1: "GATEWAY_SUBSCRIPTION_STATUS_DETACHED",
		2: "GATEWAY_SUBSCRIPTION_STATUS_ATTACHED_ACTIVE",
		3: "GATEWAY_SUBSCRIPTION_STATUS_ATTACHED_SUSPENDED",
	}
	GatewaySubscriptionStatus_value = map[string]int32{
		"GATEWAY_SUBSCRIPTION_STATUS_UNSPECIFIED":        0,
		"GATEWAY_SUBSCRIPTION_STATUS_DETACHED":           1,
		"GATEWAY_SUBSCRIPTION_STATUS_ATTACHED_ACTIVE":    2,
		"GATEWAY_SUBSCRIPTION_STATUS_ATTACHED_SUSPENDED": 3,
	}
)

func (x GatewaySubscriptionStatus) Enum() *GatewaySubscriptionStatus {
	p := new(GatewaySubscriptionStatus)
	*p = x
	return p
}

func (x GatewaySubscriptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewaySubscriptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_enumTypes[0].Descriptor()
}

func (GatewaySubscriptionStatus) Type() protoreflect.EnumType {
	return &file_tti_gateway_controller_northbound_v1_gateway_proto_enumTypes[0]
}

func (x GatewaySubscriptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewaySubscriptionStatus.Descriptor instead.
func (GatewaySubscriptionStatus) EnumDescriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP(), []int{0}
}

type Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId                    uint64 `protobuf:"fixed64,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Manufacturer                 uint32 `protobuf:"varint,2,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model                        string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	HardwareVersion              string `protobuf:"bytes,4,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	RuntimeVersion               string `protobuf:"bytes,5,opt,name=runtime_version,json=runtimeVersion,proto3" json:"runtime_version,omitempty"`
	FirmwareVersion              string `protobuf:"bytes,6,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	CellularImei                 string `protobuf:"bytes,7,opt,name=cellular_imei,json=cellularImei,proto3" json:"cellular_imei,omitempty"`
	CellularImsi                 string `protobuf:"bytes,8,opt,name=cellular_imsi,json=cellularImsi,proto3" json:"cellular_imsi,omitempty"`
	WifiMacAddress               []byte `protobuf:"bytes,9,opt,name=wifi_mac_address,json=wifiMacAddress,proto3" json:"wifi_mac_address,omitempty"`
	EthernetMacAddress           []byte `protobuf:"bytes,10,opt,name=ethernet_mac_address,json=ethernetMacAddress,proto3" json:"ethernet_mac_address,omitempty"`
	WifiProfileId                []byte `protobuf:"bytes,11,opt,name=wifi_profile_id,json=wifiProfileId,proto3" json:"wifi_profile_id,omitempty"`
	EthernetProfileId            []byte `protobuf:"bytes,12,opt,name=ethernet_profile_id,json=ethernetProfileId,proto3" json:"ethernet_profile_id,omitempty"`
	GeolocationProfileId         []byte `protobuf:"bytes,13,opt,name=geolocation_profile_id,json=geolocationProfileId,proto3" json:"geolocation_profile_id,omitempty"`
	LoraPacketForwarderProfileId []byte `protobuf:"bytes,14,opt,name=lora_packet_forwarder_profile_id,json=loraPacketForwarderProfileId,proto3" json:"lora_packet_forwarder_profile_id,omitempty"`
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *Gateway) GetGatewayId() uint64 {
	if x != nil {
		return x.GatewayId
	}
	return 0
}

func (x *Gateway) GetManufacturer() uint32 {
	if x != nil {
		return x.Manufacturer
	}
	return 0
}

func (x *Gateway) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Gateway) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *Gateway) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

func (x *Gateway) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *Gateway) GetCellularImei() string {
	if x != nil {
		return x.CellularImei
	}
	return ""
}

func (x *Gateway) GetCellularImsi() string {
	if x != nil {
		return x.CellularImsi
	}
	return ""
}

func (x *Gateway) GetWifiMacAddress() []byte {
	if x != nil {
		return x.WifiMacAddress
	}
	return nil
}

func (x *Gateway) GetEthernetMacAddress() []byte {
	if x != nil {
		return x.EthernetMacAddress
	}
	return nil
}

func (x *Gateway) GetWifiProfileId() []byte {
	if x != nil {
		return x.WifiProfileId
	}
	return nil
}

func (x *Gateway) GetEthernetProfileId() []byte {
	if x != nil {
		return x.EthernetProfileId
	}
	return nil
}

func (x *Gateway) GetGeolocationProfileId() []byte {
	if x != nil {
		return x.GeolocationProfileId
	}
	return nil
}

func (x *Gateway) GetLoraPacketForwarderProfileId() []byte {
	if x != nil {
		return x.LoraPacketForwarderProfileId
	}
	return nil
}

type GatewayLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Accuracy  float64 `protobuf:"fixed64,3,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
}

func (x *GatewayLocation) Reset() {
	*x = GatewayLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayLocation) ProtoMessage() {}

func (x *GatewayLocation) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayLocation.ProtoReflect.Descriptor instead.
func (*GatewayLocation) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *GatewayLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GatewayLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GatewayLocation) GetAccuracy() float64 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

type GatewaySystemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuTemperature                  *wrapperspb.FloatValue  `protobuf:"bytes,1,opt,name=cpu_temperature,json=cpuTemperature,proto3" json:"cpu_temperature,omitempty"`
	HeapMemoryFreeBytesCurrent      *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=heap_memory_free_bytes_current,json=heapMemoryFreeBytesCurrent,proto3" json:"heap_memory_free_bytes_current,omitempty"`
	HeapMemoryFreeBytesMinimum      *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=heap_memory_free_bytes_minimum,json=heapMemoryFreeBytesMinimum,proto3" json:"heap_memory_free_bytes_minimum,omitempty"`
	HeapMemoryLargestFreeBlockBytes *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=heap_memory_largest_free_block_bytes,json=heapMemoryLargestFreeBlockBytes,proto3" json:"heap_memory_largest_free_block_bytes,omitempty"`
}

func (x *GatewaySystemStatus) Reset() {
	*x = GatewaySystemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySystemStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySystemStatus) ProtoMessage() {}

func (x *GatewaySystemStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySystemStatus.ProtoReflect.Descriptor instead.
func (*GatewaySystemStatus) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *GatewaySystemStatus) GetCpuTemperature() *wrapperspb.FloatValue {
	if x != nil {
		return x.CpuTemperature
	}
	return nil
}

func (x *GatewaySystemStatus) GetHeapMemoryFreeBytesCurrent() *wrapperspb.UInt64Value {
	if x != nil {
		return x.HeapMemoryFreeBytesCurrent
	}
	return nil
}

func (x *GatewaySystemStatus) GetHeapMemoryFreeBytesMinimum() *wrapperspb.UInt64Value {
	if x != nil {
		return x.HeapMemoryFreeBytesMinimum
	}
	return nil
}

func (x *GatewaySystemStatus) GetHeapMemoryLargestFreeBlockBytes() *wrapperspb.UInt64Value {
	if x != nil {
		return x.HeapMemoryLargestFreeBlockBytes
	}
	return nil
}

type GatewaySession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId            []byte                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	NetworkInterfaceType NetworkInterfaceType   `protobuf:"varint,2,opt,name=network_interface_type,json=networkInterfaceType,proto3,enum=tti.gateway.controller.northbound.v1.NetworkInterfaceType" json:"network_interface_type,omitempty"`
	ConnectedAt          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=connected_at,json=connectedAt,proto3" json:"connected_at,omitempty"`
	DisconnectedAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=disconnected_at,json=disconnectedAt,proto3" json:"disconnected_at,omitempty"`
}

func (x *GatewaySession) Reset() {
	*x = GatewaySession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySession) ProtoMessage() {}

func (x *GatewaySession) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySession.ProtoReflect.Descriptor instead.
func (*GatewaySession) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *GatewaySession) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *GatewaySession) GetNetworkInterfaceType() NetworkInterfaceType {
	if x != nil {
		return x.NetworkInterfaceType
	}
	return NetworkInterfaceType_NETWORK_INTERFACE_TYPE_UNSPECIFIED
}

func (x *GatewaySession) GetConnectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConnectedAt
	}
	return nil
}

func (x *GatewaySession) GetDisconnectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DisconnectedAt
	}
	return nil
}

type GatewaySessionCellular struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkInterface *NetworkInterfaceInfo  `protobuf:"bytes,1,opt,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
	Operator         string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Rssi             *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=rssi,proto3" json:"rssi,omitempty"`
}

func (x *GatewaySessionCellular) Reset() {
	*x = GatewaySessionCellular{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySessionCellular) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySessionCellular) ProtoMessage() {}

func (x *GatewaySessionCellular) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySessionCellular.ProtoReflect.Descriptor instead.
func (*GatewaySessionCellular) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *GatewaySessionCellular) GetNetworkInterface() *NetworkInterfaceInfo {
	if x != nil {
		return x.NetworkInterface
	}
	return nil
}

func (x *GatewaySessionCellular) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *GatewaySessionCellular) GetRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Rssi
	}
	return nil
}

type GatewaySessionWifi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkInterface   *NetworkInterfaceInfo  `protobuf:"bytes,1,opt,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
	Ssid               string                 `protobuf:"bytes,2,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Bssid              []byte                 `protobuf:"bytes,3,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Channel            uint32                 `protobuf:"varint,4,opt,name=channel,proto3" json:"channel,omitempty"`
	AuthenticationMode string                 `protobuf:"bytes,5,opt,name=authentication_mode,json=authenticationMode,proto3" json:"authentication_mode,omitempty"`
	Rssi               *wrapperspb.FloatValue `protobuf:"bytes,6,opt,name=rssi,proto3" json:"rssi,omitempty"`
}

func (x *GatewaySessionWifi) Reset() {
	*x = GatewaySessionWifi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySessionWifi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySessionWifi) ProtoMessage() {}

func (x *GatewaySessionWifi) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySessionWifi.ProtoReflect.Descriptor instead.
func (*GatewaySessionWifi) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *GatewaySessionWifi) GetNetworkInterface() *NetworkInterfaceInfo {
	if x != nil {
		return x.NetworkInterface
	}
	return nil
}

func (x *GatewaySessionWifi) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *GatewaySessionWifi) GetBssid() []byte {
	if x != nil {
		return x.Bssid
	}
	return nil
}

func (x *GatewaySessionWifi) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *GatewaySessionWifi) GetAuthenticationMode() string {
	if x != nil {
		return x.AuthenticationMode
	}
	return ""
}

func (x *GatewaySessionWifi) GetRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Rssi
	}
	return nil
}

type GatewaySessionEthernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkInterface *NetworkInterfaceInfo `protobuf:"bytes,1,opt,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
}

func (x *GatewaySessionEthernet) Reset() {
	*x = GatewaySessionEthernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySessionEthernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySessionEthernet) ProtoMessage() {}

func (x *GatewaySessionEthernet) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySessionEthernet.ProtoReflect.Descriptor instead.
func (*GatewaySessionEthernet) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *GatewaySessionEthernet) GetNetworkInterface() *NetworkInterfaceInfo {
	if x != nil {
		return x.NetworkInterface
	}
	return nil
}

type GatewaySessionLoraPacketForwarder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol             LoraPacketForwarderProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=tti.gateway.controller.northbound.v1.LoraPacketForwarderProtocol" json:"protocol,omitempty"`
	Address              string                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	NetworkInterfaceType NetworkInterfaceType        `protobuf:"varint,3,opt,name=network_interface_type,json=networkInterfaceType,proto3,enum=tti.gateway.controller.northbound.v1.NetworkInterfaceType" json:"network_interface_type,omitempty"`
}

func (x *GatewaySessionLoraPacketForwarder) Reset() {
	*x = GatewaySessionLoraPacketForwarder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySessionLoraPacketForwarder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySessionLoraPacketForwarder) ProtoMessage() {}

func (x *GatewaySessionLoraPacketForwarder) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySessionLoraPacketForwarder.ProtoReflect.Descriptor instead.
func (*GatewaySessionLoraPacketForwarder) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *GatewaySessionLoraPacketForwarder) GetProtocol() LoraPacketForwarderProtocol {
	if x != nil {
		return x.Protocol
	}
	return LoraPacketForwarderProtocol_LORA_PACKET_FORWARDER_PROTOCOL_UNSPECIFIED
}

func (x *GatewaySessionLoraPacketForwarder) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GatewaySessionLoraPacketForwarder) GetNetworkInterfaceType() NetworkInterfaceType {
	if x != nil {
		return x.NetworkInterfaceType
	}
	return NetworkInterfaceType_NETWORK_INTERFACE_TYPE_UNSPECIFIED
}

type WifiAccessPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid               string  `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Bssid              []byte  `protobuf:"bytes,2,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Channel            uint32  `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
	AuthenticationMode string  `protobuf:"bytes,4,opt,name=authentication_mode,json=authenticationMode,proto3" json:"authentication_mode,omitempty"`
	Rssi               float32 `protobuf:"fixed32,5,opt,name=rssi,proto3" json:"rssi,omitempty"`
}

func (x *WifiAccessPoint) Reset() {
	*x = WifiAccessPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiAccessPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiAccessPoint) ProtoMessage() {}

func (x *WifiAccessPoint) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiAccessPoint.ProtoReflect.Descriptor instead.
func (*WifiAccessPoint) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *WifiAccessPoint) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *WifiAccessPoint) GetBssid() []byte {
	if x != nil {
		return x.Bssid
	}
	return nil
}

func (x *WifiAccessPoint) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *WifiAccessPoint) GetAuthenticationMode() string {
	if x != nil {
		return x.AuthenticationMode
	}
	return ""
}

func (x *WifiAccessPoint) GetRssi() float32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

type GatewaySubscriptionStatusValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GatewaySubscriptionStatus `protobuf:"varint,1,opt,name=value,proto3,enum=tti.gateway.controller.northbound.v1.GatewaySubscriptionStatus" json:"value,omitempty"`
	ExpiresAt *timestamppb.Timestamp    `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *GatewaySubscriptionStatusValue) Reset() {
	*x = GatewaySubscriptionStatusValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySubscriptionStatusValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySubscriptionStatusValue) ProtoMessage() {}

func (x *GatewaySubscriptionStatusValue) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySubscriptionStatusValue.ProtoReflect.Descriptor instead.
func (*GatewaySubscriptionStatusValue) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP(), []int{9}
}

func (x *GatewaySubscriptionStatusValue) GetValue() GatewaySubscriptionStatus {
	if x != nil {
		return x.Value
	}
	return GatewaySubscriptionStatus_GATEWAY_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *GatewaySubscriptionStatusValue) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

var File_tti_gateway_controller_northbound_v1_gateway_proto protoreflect.FileDescriptor

var file_tti_gateway_controller_northbound_v1_gateway_proto_rawDesc = []byte{
	0x0a, 0x32, 0x74, 0x74, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72,
	0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x74, 0x74, 0x69, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2f, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x04, 0x0a, 0x07,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x65, 0x69,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72,
	0x49, 0x6d, 0x65, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x49, 0x6d, 0x73, 0x69, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x66,
	0x69, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x77, 0x69, 0x66, 0x69, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x12, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x77, 0x69, 0x66, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x67,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x6c,
	0x6f, 0x72, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x0f, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x22, 0x8c, 0x03, 0x0a, 0x13, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0f,
	0x63, 0x70, 0x75, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x60, 0x0a, 0x1e, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x68, 0x65, 0x61, 0x70, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x46, 0x72, 0x65, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x1e, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x68, 0x65, 0x61, 0x70,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x46, 0x72, 0x65, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x6b, 0x0a, 0x24, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1f, 0x68, 0x65, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x16,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x67, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x72,
	0x73, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x22, 0xa3, 0x02, 0x0a,
	0x12, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x66, 0x69, 0x12, 0x67, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x2f, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x72, 0x73,
	0x73, 0x69, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x67, 0x0a,
	0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x21, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x72, 0x61, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41,
	0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x72, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x70, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x57, 0x69, 0x66, 0x69,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x2f, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x72, 0x73, 0x73, 0x69, 0x22, 0xbf, 0x01, 0x0a, 0x1e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x62, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x82, 0x01, 0x05, 0x10,
	0x01, 0x22, 0x01, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x2a, 0xd7, 0x01, 0x0a, 0x19, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x27, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x47,
	0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x48, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e,
	0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03,
	0x42, 0xc0, 0x02, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x51, 0x67,
	0x6f, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x74, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x76, 0x31,
	0xa2, 0x02, 0x04, 0x54, 0x47, 0x43, 0x4e, 0xaa, 0x02, 0x24, 0x54, 0x74, 0x69, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x24, 0x54, 0x74, 0x69, 0x5c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5c, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x30, 0x54, 0x74, 0x69, 0x5c, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5c, 0x4e,
	0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x28, 0x54, 0x74, 0x69, 0x3a, 0x3a,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x3a, 0x3a, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescOnce sync.Once
	file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescData = file_tti_gateway_controller_northbound_v1_gateway_proto_rawDesc
)

func file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescGZIP() []byte {
	file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescOnce.Do(func() {
		file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescData)
	})
	return file_tti_gateway_controller_northbound_v1_gateway_proto_rawDescData
}

var file_tti_gateway_controller_northbound_v1_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_tti_gateway_controller_northbound_v1_gateway_proto_goTypes = []interface{}{
	(GatewaySubscriptionStatus)(0),            // 0: tti.gateway.controller.northbound.v1.GatewaySubscriptionStatus
	(*Gateway)(nil),                           // 1: tti.gateway.controller.northbound.v1.Gateway
	(*GatewayLocation)(nil),                   // 2: tti.gateway.controller.northbound.v1.GatewayLocation
	(*GatewaySystemStatus)(nil),               // 3: tti.gateway.controller.northbound.v1.GatewaySystemStatus
	(*GatewaySession)(nil),                    // 4: tti.gateway.controller.northbound.v1.GatewaySession
	(*GatewaySessionCellular)(nil),            // 5: tti.gateway.controller.northbound.v1.GatewaySessionCellular
	(*GatewaySessionWifi)(nil),                // 6: tti.gateway.controller.northbound.v1.GatewaySessionWifi
	(*GatewaySessionEthernet)(nil),            // 7: tti.gateway.controller.northbound.v1.GatewaySessionEthernet
	(*GatewaySessionLoraPacketForwarder)(nil), // 8: tti.gateway.controller.northbound.v1.GatewaySessionLoraPacketForwarder
	(*WifiAccessPoint)(nil),                   // 9: tti.gateway.controller.northbound.v1.WifiAccessPoint
	(*GatewaySubscriptionStatusValue)(nil),    // 10: tti.gateway.controller.northbound.v1.GatewaySubscriptionStatusValue
	(*wrapperspb.FloatValue)(nil),             // 11: google.protobuf.FloatValue
	(*wrapperspb.UInt64Value)(nil),            // 12: google.protobuf.UInt64Value
	(NetworkInterfaceType)(0),                 // 13: tti.gateway.controller.northbound.v1.NetworkInterfaceType
	(*timestamppb.Timestamp)(nil),             // 14: google.protobuf.Timestamp
	(*NetworkInterfaceInfo)(nil),              // 15: tti.gateway.controller.northbound.v1.NetworkInterfaceInfo
	(LoraPacketForwarderProtocol)(0),          // 16: tti.gateway.controller.northbound.v1.LoraPacketForwarderProtocol
}
var file_tti_gateway_controller_northbound_v1_gateway_proto_depIdxs = []int32{
	11, // 0: tti.gateway.controller.northbound.v1.GatewaySystemStatus.cpu_temperature:type_name -> google.protobuf.FloatValue
	12, // 1: tti.gateway.controller.northbound.v1.GatewaySystemStatus.heap_memory_free_bytes_current:type_name -> google.protobuf.UInt64Value
	12, // 2: tti.gateway.controller.northbound.v1.GatewaySystemStatus.heap_memory_free_bytes_minimum:type_name -> google.protobuf.UInt64Value
	12, // 3: tti.gateway.controller.northbound.v1.GatewaySystemStatus.heap_memory_largest_free_block_bytes:type_name -> google.protobuf.UInt64Value
	13, // 4: tti.gateway.controller.northbound.v1.GatewaySession.network_interface_type:type_name -> tti.gateway.controller.northbound.v1.NetworkInterfaceType
	14, // 5: tti.gateway.controller.northbound.v1.GatewaySession.connected_at:type_name -> google.protobuf.Timestamp
	14, // 6: tti.gateway.controller.northbound.v1.GatewaySession.disconnected_at:type_name -> google.protobuf.Timestamp
	15, // 7: tti.gateway.controller.northbound.v1.GatewaySessionCellular.network_interface:type_name -> tti.gateway.controller.northbound.v1.NetworkInterfaceInfo
	11, // 8: tti.gateway.controller.northbound.v1.GatewaySessionCellular.rssi:type_name -> google.protobuf.FloatValue
	15, // 9: tti.gateway.controller.northbound.v1.GatewaySessionWifi.network_interface:type_name -> tti.gateway.controller.northbound.v1.NetworkInterfaceInfo
	11, // 10: tti.gateway.controller.northbound.v1.GatewaySessionWifi.rssi:type_name -> google.protobuf.FloatValue
	15, // 11: tti.gateway.controller.northbound.v1.GatewaySessionEthernet.network_interface:type_name -> tti.gateway.controller.northbound.v1.NetworkInterfaceInfo
	16, // 12: tti.gateway.controller.northbound.v1.GatewaySessionLoraPacketForwarder.protocol:type_name -> tti.gateway.controller.northbound.v1.LoraPacketForwarderProtocol
	13, // 13: tti.gateway.controller.northbound.v1.GatewaySessionLoraPacketForwarder.network_interface_type:type_name -> tti.gateway.controller.northbound.v1.NetworkInterfaceType
	0,  // 14: tti.gateway.controller.northbound.v1.GatewaySubscriptionStatusValue.value:type_name -> tti.gateway.controller.northbound.v1.GatewaySubscriptionStatus
	14, // 15: tti.gateway.controller.northbound.v1.GatewaySubscriptionStatusValue.expires_at:type_name -> google.protobuf.Timestamp
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_tti_gateway_controller_northbound_v1_gateway_proto_init() }
func file_tti_gateway_controller_northbound_v1_gateway_proto_init() {
	if File_tti_gateway_controller_northbound_v1_gateway_proto != nil {
		return
	}
	file_tti_gateway_controller_northbound_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySystemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySessionCellular); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySessionWifi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySessionEthernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySessionLoraPacketForwarder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiAccessPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySubscriptionStatusValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tti_gateway_controller_northbound_v1_gateway_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tti_gateway_controller_northbound_v1_gateway_proto_goTypes,
		DependencyIndexes: file_tti_gateway_controller_northbound_v1_gateway_proto_depIdxs,
		EnumInfos:         file_tti_gateway_controller_northbound_v1_gateway_proto_enumTypes,
		MessageInfos:      file_tti_gateway_controller_northbound_v1_gateway_proto_msgTypes,
	}.Build()
	File_tti_gateway_controller_northbound_v1_gateway_proto = out.File
	file_tti_gateway_controller_northbound_v1_gateway_proto_rawDesc = nil
	file_tti_gateway_controller_northbound_v1_gateway_proto_goTypes = nil
	file_tti_gateway_controller_northbound_v1_gateway_proto_depIdxs = nil
}
