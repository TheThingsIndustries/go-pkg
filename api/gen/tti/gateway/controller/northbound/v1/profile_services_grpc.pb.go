// Copyright Â© 2024 The Things Industries B.V.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: tti/gateway/controller/northbound/v1/profile_services.proto

package northboundv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WifiProfileService_Create_FullMethodName    = "/tti.gateway.controller.northbound.v1.WifiProfileService/Create"
	WifiProfileService_List_FullMethodName      = "/tti.gateway.controller.northbound.v1.WifiProfileService/List"
	WifiProfileService_Get_FullMethodName       = "/tti.gateway.controller.northbound.v1.WifiProfileService/Get"
	WifiProfileService_GetByName_FullMethodName = "/tti.gateway.controller.northbound.v1.WifiProfileService/GetByName"
	WifiProfileService_Update_FullMethodName    = "/tti.gateway.controller.northbound.v1.WifiProfileService/Update"
	WifiProfileService_Delete_FullMethodName    = "/tti.gateway.controller.northbound.v1.WifiProfileService/Delete"
)

// WifiProfileServiceClient is the client API for WifiProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WifiProfileServiceClient interface {
	Create(ctx context.Context, in *WifiProfileServiceCreateRequest, opts ...grpc.CallOption) (*WifiProfileServiceCreateResponse, error)
	List(ctx context.Context, in *WifiProfileServiceListRequest, opts ...grpc.CallOption) (*WifiProfileServiceListResponse, error)
	Get(ctx context.Context, in *WifiProfileServiceGetRequest, opts ...grpc.CallOption) (*WifiProfileServiceGetResponse, error)
	GetByName(ctx context.Context, in *WifiProfileServiceGetByNameRequest, opts ...grpc.CallOption) (*WifiProfileServiceGetByNameResponse, error)
	Update(ctx context.Context, in *WifiProfileServiceUpdateRequest, opts ...grpc.CallOption) (*WifiProfileServiceUpdateResponse, error)
	Delete(ctx context.Context, in *WifiProfileServiceDeleteRequest, opts ...grpc.CallOption) (*WifiProfileServiceDeleteResponse, error)
}

type wifiProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWifiProfileServiceClient(cc grpc.ClientConnInterface) WifiProfileServiceClient {
	return &wifiProfileServiceClient{cc}
}

func (c *wifiProfileServiceClient) Create(ctx context.Context, in *WifiProfileServiceCreateRequest, opts ...grpc.CallOption) (*WifiProfileServiceCreateResponse, error) {
	out := new(WifiProfileServiceCreateResponse)
	err := c.cc.Invoke(ctx, WifiProfileService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiProfileServiceClient) List(ctx context.Context, in *WifiProfileServiceListRequest, opts ...grpc.CallOption) (*WifiProfileServiceListResponse, error) {
	out := new(WifiProfileServiceListResponse)
	err := c.cc.Invoke(ctx, WifiProfileService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiProfileServiceClient) Get(ctx context.Context, in *WifiProfileServiceGetRequest, opts ...grpc.CallOption) (*WifiProfileServiceGetResponse, error) {
	out := new(WifiProfileServiceGetResponse)
	err := c.cc.Invoke(ctx, WifiProfileService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiProfileServiceClient) GetByName(ctx context.Context, in *WifiProfileServiceGetByNameRequest, opts ...grpc.CallOption) (*WifiProfileServiceGetByNameResponse, error) {
	out := new(WifiProfileServiceGetByNameResponse)
	err := c.cc.Invoke(ctx, WifiProfileService_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiProfileServiceClient) Update(ctx context.Context, in *WifiProfileServiceUpdateRequest, opts ...grpc.CallOption) (*WifiProfileServiceUpdateResponse, error) {
	out := new(WifiProfileServiceUpdateResponse)
	err := c.cc.Invoke(ctx, WifiProfileService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiProfileServiceClient) Delete(ctx context.Context, in *WifiProfileServiceDeleteRequest, opts ...grpc.CallOption) (*WifiProfileServiceDeleteResponse, error) {
	out := new(WifiProfileServiceDeleteResponse)
	err := c.cc.Invoke(ctx, WifiProfileService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WifiProfileServiceServer is the server API for WifiProfileService service.
// All implementations must embed UnimplementedWifiProfileServiceServer
// for forward compatibility
type WifiProfileServiceServer interface {
	Create(context.Context, *WifiProfileServiceCreateRequest) (*WifiProfileServiceCreateResponse, error)
	List(context.Context, *WifiProfileServiceListRequest) (*WifiProfileServiceListResponse, error)
	Get(context.Context, *WifiProfileServiceGetRequest) (*WifiProfileServiceGetResponse, error)
	GetByName(context.Context, *WifiProfileServiceGetByNameRequest) (*WifiProfileServiceGetByNameResponse, error)
	Update(context.Context, *WifiProfileServiceUpdateRequest) (*WifiProfileServiceUpdateResponse, error)
	Delete(context.Context, *WifiProfileServiceDeleteRequest) (*WifiProfileServiceDeleteResponse, error)
	mustEmbedUnimplementedWifiProfileServiceServer()
}

// UnimplementedWifiProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWifiProfileServiceServer struct {
}

func (UnimplementedWifiProfileServiceServer) Create(context.Context, *WifiProfileServiceCreateRequest) (*WifiProfileServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWifiProfileServiceServer) List(context.Context, *WifiProfileServiceListRequest) (*WifiProfileServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWifiProfileServiceServer) Get(context.Context, *WifiProfileServiceGetRequest) (*WifiProfileServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWifiProfileServiceServer) GetByName(context.Context, *WifiProfileServiceGetByNameRequest) (*WifiProfileServiceGetByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedWifiProfileServiceServer) Update(context.Context, *WifiProfileServiceUpdateRequest) (*WifiProfileServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWifiProfileServiceServer) Delete(context.Context, *WifiProfileServiceDeleteRequest) (*WifiProfileServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWifiProfileServiceServer) mustEmbedUnimplementedWifiProfileServiceServer() {}

// UnsafeWifiProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WifiProfileServiceServer will
// result in compilation errors.
type UnsafeWifiProfileServiceServer interface {
	mustEmbedUnimplementedWifiProfileServiceServer()
}

func RegisterWifiProfileServiceServer(s grpc.ServiceRegistrar, srv WifiProfileServiceServer) {
	s.RegisterService(&WifiProfileService_ServiceDesc, srv)
}

func _WifiProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiProfileServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WifiProfileService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiProfileServiceServer).Create(ctx, req.(*WifiProfileServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiProfileService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiProfileServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiProfileServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WifiProfileService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiProfileServiceServer).List(ctx, req.(*WifiProfileServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiProfileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiProfileServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiProfileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WifiProfileService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiProfileServiceServer).Get(ctx, req.(*WifiProfileServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiProfileService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiProfileServiceGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiProfileServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WifiProfileService_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiProfileServiceServer).GetByName(ctx, req.(*WifiProfileServiceGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiProfileServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WifiProfileService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiProfileServiceServer).Update(ctx, req.(*WifiProfileServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WifiProfileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiProfileServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiProfileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WifiProfileService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiProfileServiceServer).Delete(ctx, req.(*WifiProfileServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WifiProfileService_ServiceDesc is the grpc.ServiceDesc for WifiProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WifiProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tti.gateway.controller.northbound.v1.WifiProfileService",
	HandlerType: (*WifiProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WifiProfileService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WifiProfileService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WifiProfileService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _WifiProfileService_GetByName_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WifiProfileService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WifiProfileService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tti/gateway/controller/northbound/v1/profile_services.proto",
}

const (
	EthernetProfileService_Create_FullMethodName    = "/tti.gateway.controller.northbound.v1.EthernetProfileService/Create"
	EthernetProfileService_List_FullMethodName      = "/tti.gateway.controller.northbound.v1.EthernetProfileService/List"
	EthernetProfileService_Get_FullMethodName       = "/tti.gateway.controller.northbound.v1.EthernetProfileService/Get"
	EthernetProfileService_GetByName_FullMethodName = "/tti.gateway.controller.northbound.v1.EthernetProfileService/GetByName"
	EthernetProfileService_Update_FullMethodName    = "/tti.gateway.controller.northbound.v1.EthernetProfileService/Update"
	EthernetProfileService_Delete_FullMethodName    = "/tti.gateway.controller.northbound.v1.EthernetProfileService/Delete"
)

// EthernetProfileServiceClient is the client API for EthernetProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthernetProfileServiceClient interface {
	Create(ctx context.Context, in *EthernetProfileServiceCreateRequest, opts ...grpc.CallOption) (*EthernetProfileServiceCreateResponse, error)
	List(ctx context.Context, in *EthernetProfileServiceListRequest, opts ...grpc.CallOption) (*EthernetProfileServiceListResponse, error)
	Get(ctx context.Context, in *EthernetProfileServiceGetRequest, opts ...grpc.CallOption) (*EthernetProfileServiceGetResponse, error)
	GetByName(ctx context.Context, in *EthernetProfileServiceGetByNameRequest, opts ...grpc.CallOption) (*EthernetProfileServiceGetByNameResponse, error)
	Update(ctx context.Context, in *EthernetProfileServiceUpdateRequest, opts ...grpc.CallOption) (*EthernetProfileServiceUpdateResponse, error)
	Delete(ctx context.Context, in *EthernetProfileServiceDeleteRequest, opts ...grpc.CallOption) (*EthernetProfileServiceDeleteResponse, error)
}

type ethernetProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEthernetProfileServiceClient(cc grpc.ClientConnInterface) EthernetProfileServiceClient {
	return &ethernetProfileServiceClient{cc}
}

func (c *ethernetProfileServiceClient) Create(ctx context.Context, in *EthernetProfileServiceCreateRequest, opts ...grpc.CallOption) (*EthernetProfileServiceCreateResponse, error) {
	out := new(EthernetProfileServiceCreateResponse)
	err := c.cc.Invoke(ctx, EthernetProfileService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethernetProfileServiceClient) List(ctx context.Context, in *EthernetProfileServiceListRequest, opts ...grpc.CallOption) (*EthernetProfileServiceListResponse, error) {
	out := new(EthernetProfileServiceListResponse)
	err := c.cc.Invoke(ctx, EthernetProfileService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethernetProfileServiceClient) Get(ctx context.Context, in *EthernetProfileServiceGetRequest, opts ...grpc.CallOption) (*EthernetProfileServiceGetResponse, error) {
	out := new(EthernetProfileServiceGetResponse)
	err := c.cc.Invoke(ctx, EthernetProfileService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethernetProfileServiceClient) GetByName(ctx context.Context, in *EthernetProfileServiceGetByNameRequest, opts ...grpc.CallOption) (*EthernetProfileServiceGetByNameResponse, error) {
	out := new(EthernetProfileServiceGetByNameResponse)
	err := c.cc.Invoke(ctx, EthernetProfileService_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethernetProfileServiceClient) Update(ctx context.Context, in *EthernetProfileServiceUpdateRequest, opts ...grpc.CallOption) (*EthernetProfileServiceUpdateResponse, error) {
	out := new(EthernetProfileServiceUpdateResponse)
	err := c.cc.Invoke(ctx, EthernetProfileService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethernetProfileServiceClient) Delete(ctx context.Context, in *EthernetProfileServiceDeleteRequest, opts ...grpc.CallOption) (*EthernetProfileServiceDeleteResponse, error) {
	out := new(EthernetProfileServiceDeleteResponse)
	err := c.cc.Invoke(ctx, EthernetProfileService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthernetProfileServiceServer is the server API for EthernetProfileService service.
// All implementations must embed UnimplementedEthernetProfileServiceServer
// for forward compatibility
type EthernetProfileServiceServer interface {
	Create(context.Context, *EthernetProfileServiceCreateRequest) (*EthernetProfileServiceCreateResponse, error)
	List(context.Context, *EthernetProfileServiceListRequest) (*EthernetProfileServiceListResponse, error)
	Get(context.Context, *EthernetProfileServiceGetRequest) (*EthernetProfileServiceGetResponse, error)
	GetByName(context.Context, *EthernetProfileServiceGetByNameRequest) (*EthernetProfileServiceGetByNameResponse, error)
	Update(context.Context, *EthernetProfileServiceUpdateRequest) (*EthernetProfileServiceUpdateResponse, error)
	Delete(context.Context, *EthernetProfileServiceDeleteRequest) (*EthernetProfileServiceDeleteResponse, error)
	mustEmbedUnimplementedEthernetProfileServiceServer()
}

// UnimplementedEthernetProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEthernetProfileServiceServer struct {
}

func (UnimplementedEthernetProfileServiceServer) Create(context.Context, *EthernetProfileServiceCreateRequest) (*EthernetProfileServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEthernetProfileServiceServer) List(context.Context, *EthernetProfileServiceListRequest) (*EthernetProfileServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEthernetProfileServiceServer) Get(context.Context, *EthernetProfileServiceGetRequest) (*EthernetProfileServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEthernetProfileServiceServer) GetByName(context.Context, *EthernetProfileServiceGetByNameRequest) (*EthernetProfileServiceGetByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedEthernetProfileServiceServer) Update(context.Context, *EthernetProfileServiceUpdateRequest) (*EthernetProfileServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEthernetProfileServiceServer) Delete(context.Context, *EthernetProfileServiceDeleteRequest) (*EthernetProfileServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEthernetProfileServiceServer) mustEmbedUnimplementedEthernetProfileServiceServer() {
}

// UnsafeEthernetProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthernetProfileServiceServer will
// result in compilation errors.
type UnsafeEthernetProfileServiceServer interface {
	mustEmbedUnimplementedEthernetProfileServiceServer()
}

func RegisterEthernetProfileServiceServer(s grpc.ServiceRegistrar, srv EthernetProfileServiceServer) {
	s.RegisterService(&EthernetProfileService_ServiceDesc, srv)
}

func _EthernetProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthernetProfileServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthernetProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthernetProfileService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthernetProfileServiceServer).Create(ctx, req.(*EthernetProfileServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthernetProfileService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthernetProfileServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthernetProfileServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthernetProfileService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthernetProfileServiceServer).List(ctx, req.(*EthernetProfileServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthernetProfileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthernetProfileServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthernetProfileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthernetProfileService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthernetProfileServiceServer).Get(ctx, req.(*EthernetProfileServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthernetProfileService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthernetProfileServiceGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthernetProfileServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthernetProfileService_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthernetProfileServiceServer).GetByName(ctx, req.(*EthernetProfileServiceGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthernetProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthernetProfileServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthernetProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthernetProfileService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthernetProfileServiceServer).Update(ctx, req.(*EthernetProfileServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthernetProfileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthernetProfileServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthernetProfileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthernetProfileService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthernetProfileServiceServer).Delete(ctx, req.(*EthernetProfileServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EthernetProfileService_ServiceDesc is the grpc.ServiceDesc for EthernetProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EthernetProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tti.gateway.controller.northbound.v1.EthernetProfileService",
	HandlerType: (*EthernetProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EthernetProfileService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _EthernetProfileService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EthernetProfileService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _EthernetProfileService_GetByName_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EthernetProfileService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EthernetProfileService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tti/gateway/controller/northbound/v1/profile_services.proto",
}

const (
	GeolocationProfileService_Create_FullMethodName    = "/tti.gateway.controller.northbound.v1.GeolocationProfileService/Create"
	GeolocationProfileService_List_FullMethodName      = "/tti.gateway.controller.northbound.v1.GeolocationProfileService/List"
	GeolocationProfileService_Get_FullMethodName       = "/tti.gateway.controller.northbound.v1.GeolocationProfileService/Get"
	GeolocationProfileService_GetByName_FullMethodName = "/tti.gateway.controller.northbound.v1.GeolocationProfileService/GetByName"
	GeolocationProfileService_Update_FullMethodName    = "/tti.gateway.controller.northbound.v1.GeolocationProfileService/Update"
	GeolocationProfileService_Delete_FullMethodName    = "/tti.gateway.controller.northbound.v1.GeolocationProfileService/Delete"
)

// GeolocationProfileServiceClient is the client API for GeolocationProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeolocationProfileServiceClient interface {
	Create(ctx context.Context, in *GeolocationProfileServiceCreateRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceCreateResponse, error)
	List(ctx context.Context, in *GeolocationProfileServiceListRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceListResponse, error)
	Get(ctx context.Context, in *GeolocationProfileServiceGetRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceGetResponse, error)
	GetByName(ctx context.Context, in *GeolocationProfileServiceGetByNameRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceGetByNameResponse, error)
	Update(ctx context.Context, in *GeolocationProfileServiceUpdateRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceUpdateResponse, error)
	Delete(ctx context.Context, in *GeolocationProfileServiceDeleteRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceDeleteResponse, error)
}

type geolocationProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeolocationProfileServiceClient(cc grpc.ClientConnInterface) GeolocationProfileServiceClient {
	return &geolocationProfileServiceClient{cc}
}

func (c *geolocationProfileServiceClient) Create(ctx context.Context, in *GeolocationProfileServiceCreateRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceCreateResponse, error) {
	out := new(GeolocationProfileServiceCreateResponse)
	err := c.cc.Invoke(ctx, GeolocationProfileService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationProfileServiceClient) List(ctx context.Context, in *GeolocationProfileServiceListRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceListResponse, error) {
	out := new(GeolocationProfileServiceListResponse)
	err := c.cc.Invoke(ctx, GeolocationProfileService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationProfileServiceClient) Get(ctx context.Context, in *GeolocationProfileServiceGetRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceGetResponse, error) {
	out := new(GeolocationProfileServiceGetResponse)
	err := c.cc.Invoke(ctx, GeolocationProfileService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationProfileServiceClient) GetByName(ctx context.Context, in *GeolocationProfileServiceGetByNameRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceGetByNameResponse, error) {
	out := new(GeolocationProfileServiceGetByNameResponse)
	err := c.cc.Invoke(ctx, GeolocationProfileService_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationProfileServiceClient) Update(ctx context.Context, in *GeolocationProfileServiceUpdateRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceUpdateResponse, error) {
	out := new(GeolocationProfileServiceUpdateResponse)
	err := c.cc.Invoke(ctx, GeolocationProfileService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationProfileServiceClient) Delete(ctx context.Context, in *GeolocationProfileServiceDeleteRequest, opts ...grpc.CallOption) (*GeolocationProfileServiceDeleteResponse, error) {
	out := new(GeolocationProfileServiceDeleteResponse)
	err := c.cc.Invoke(ctx, GeolocationProfileService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeolocationProfileServiceServer is the server API for GeolocationProfileService service.
// All implementations must embed UnimplementedGeolocationProfileServiceServer
// for forward compatibility
type GeolocationProfileServiceServer interface {
	Create(context.Context, *GeolocationProfileServiceCreateRequest) (*GeolocationProfileServiceCreateResponse, error)
	List(context.Context, *GeolocationProfileServiceListRequest) (*GeolocationProfileServiceListResponse, error)
	Get(context.Context, *GeolocationProfileServiceGetRequest) (*GeolocationProfileServiceGetResponse, error)
	GetByName(context.Context, *GeolocationProfileServiceGetByNameRequest) (*GeolocationProfileServiceGetByNameResponse, error)
	Update(context.Context, *GeolocationProfileServiceUpdateRequest) (*GeolocationProfileServiceUpdateResponse, error)
	Delete(context.Context, *GeolocationProfileServiceDeleteRequest) (*GeolocationProfileServiceDeleteResponse, error)
	mustEmbedUnimplementedGeolocationProfileServiceServer()
}

// UnimplementedGeolocationProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGeolocationProfileServiceServer struct {
}

func (UnimplementedGeolocationProfileServiceServer) Create(context.Context, *GeolocationProfileServiceCreateRequest) (*GeolocationProfileServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGeolocationProfileServiceServer) List(context.Context, *GeolocationProfileServiceListRequest) (*GeolocationProfileServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGeolocationProfileServiceServer) Get(context.Context, *GeolocationProfileServiceGetRequest) (*GeolocationProfileServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGeolocationProfileServiceServer) GetByName(context.Context, *GeolocationProfileServiceGetByNameRequest) (*GeolocationProfileServiceGetByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedGeolocationProfileServiceServer) Update(context.Context, *GeolocationProfileServiceUpdateRequest) (*GeolocationProfileServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGeolocationProfileServiceServer) Delete(context.Context, *GeolocationProfileServiceDeleteRequest) (*GeolocationProfileServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGeolocationProfileServiceServer) mustEmbedUnimplementedGeolocationProfileServiceServer() {
}

// UnsafeGeolocationProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeolocationProfileServiceServer will
// result in compilation errors.
type UnsafeGeolocationProfileServiceServer interface {
	mustEmbedUnimplementedGeolocationProfileServiceServer()
}

func RegisterGeolocationProfileServiceServer(s grpc.ServiceRegistrar, srv GeolocationProfileServiceServer) {
	s.RegisterService(&GeolocationProfileService_ServiceDesc, srv)
}

func _GeolocationProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeolocationProfileServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationProfileService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationProfileServiceServer).Create(ctx, req.(*GeolocationProfileServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationProfileService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeolocationProfileServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationProfileServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationProfileService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationProfileServiceServer).List(ctx, req.(*GeolocationProfileServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationProfileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeolocationProfileServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationProfileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationProfileService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationProfileServiceServer).Get(ctx, req.(*GeolocationProfileServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationProfileService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeolocationProfileServiceGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationProfileServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationProfileService_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationProfileServiceServer).GetByName(ctx, req.(*GeolocationProfileServiceGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeolocationProfileServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationProfileService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationProfileServiceServer).Update(ctx, req.(*GeolocationProfileServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocationProfileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeolocationProfileServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationProfileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeolocationProfileService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationProfileServiceServer).Delete(ctx, req.(*GeolocationProfileServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeolocationProfileService_ServiceDesc is the grpc.ServiceDesc for GeolocationProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeolocationProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tti.gateway.controller.northbound.v1.GeolocationProfileService",
	HandlerType: (*GeolocationProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GeolocationProfileService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GeolocationProfileService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GeolocationProfileService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _GeolocationProfileService_GetByName_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GeolocationProfileService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GeolocationProfileService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tti/gateway/controller/northbound/v1/profile_services.proto",
}

const (
	LoraPacketForwarderProfileService_Create_FullMethodName    = "/tti.gateway.controller.northbound.v1.LoraPacketForwarderProfileService/Create"
	LoraPacketForwarderProfileService_List_FullMethodName      = "/tti.gateway.controller.northbound.v1.LoraPacketForwarderProfileService/List"
	LoraPacketForwarderProfileService_Get_FullMethodName       = "/tti.gateway.controller.northbound.v1.LoraPacketForwarderProfileService/Get"
	LoraPacketForwarderProfileService_GetByName_FullMethodName = "/tti.gateway.controller.northbound.v1.LoraPacketForwarderProfileService/GetByName"
	LoraPacketForwarderProfileService_Update_FullMethodName    = "/tti.gateway.controller.northbound.v1.LoraPacketForwarderProfileService/Update"
	LoraPacketForwarderProfileService_Delete_FullMethodName    = "/tti.gateway.controller.northbound.v1.LoraPacketForwarderProfileService/Delete"
)

// LoraPacketForwarderProfileServiceClient is the client API for LoraPacketForwarderProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoraPacketForwarderProfileServiceClient interface {
	Create(ctx context.Context, in *LoraPacketForwarderProfileServiceCreateRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceCreateResponse, error)
	List(ctx context.Context, in *LoraPacketForwarderProfileServiceListRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceListResponse, error)
	Get(ctx context.Context, in *LoraPacketForwarderProfileServiceGetRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceGetResponse, error)
	GetByName(ctx context.Context, in *LoraPacketForwarderProfileServiceGetByNameRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceGetByNameResponse, error)
	Update(ctx context.Context, in *LoraPacketForwarderProfileServiceUpdateRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceUpdateResponse, error)
	Delete(ctx context.Context, in *LoraPacketForwarderProfileServiceDeleteRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceDeleteResponse, error)
}

type loraPacketForwarderProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoraPacketForwarderProfileServiceClient(cc grpc.ClientConnInterface) LoraPacketForwarderProfileServiceClient {
	return &loraPacketForwarderProfileServiceClient{cc}
}

func (c *loraPacketForwarderProfileServiceClient) Create(ctx context.Context, in *LoraPacketForwarderProfileServiceCreateRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceCreateResponse, error) {
	out := new(LoraPacketForwarderProfileServiceCreateResponse)
	err := c.cc.Invoke(ctx, LoraPacketForwarderProfileService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loraPacketForwarderProfileServiceClient) List(ctx context.Context, in *LoraPacketForwarderProfileServiceListRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceListResponse, error) {
	out := new(LoraPacketForwarderProfileServiceListResponse)
	err := c.cc.Invoke(ctx, LoraPacketForwarderProfileService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loraPacketForwarderProfileServiceClient) Get(ctx context.Context, in *LoraPacketForwarderProfileServiceGetRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceGetResponse, error) {
	out := new(LoraPacketForwarderProfileServiceGetResponse)
	err := c.cc.Invoke(ctx, LoraPacketForwarderProfileService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loraPacketForwarderProfileServiceClient) GetByName(ctx context.Context, in *LoraPacketForwarderProfileServiceGetByNameRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceGetByNameResponse, error) {
	out := new(LoraPacketForwarderProfileServiceGetByNameResponse)
	err := c.cc.Invoke(ctx, LoraPacketForwarderProfileService_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loraPacketForwarderProfileServiceClient) Update(ctx context.Context, in *LoraPacketForwarderProfileServiceUpdateRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceUpdateResponse, error) {
	out := new(LoraPacketForwarderProfileServiceUpdateResponse)
	err := c.cc.Invoke(ctx, LoraPacketForwarderProfileService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loraPacketForwarderProfileServiceClient) Delete(ctx context.Context, in *LoraPacketForwarderProfileServiceDeleteRequest, opts ...grpc.CallOption) (*LoraPacketForwarderProfileServiceDeleteResponse, error) {
	out := new(LoraPacketForwarderProfileServiceDeleteResponse)
	err := c.cc.Invoke(ctx, LoraPacketForwarderProfileService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoraPacketForwarderProfileServiceServer is the server API for LoraPacketForwarderProfileService service.
// All implementations must embed UnimplementedLoraPacketForwarderProfileServiceServer
// for forward compatibility
type LoraPacketForwarderProfileServiceServer interface {
	Create(context.Context, *LoraPacketForwarderProfileServiceCreateRequest) (*LoraPacketForwarderProfileServiceCreateResponse, error)
	List(context.Context, *LoraPacketForwarderProfileServiceListRequest) (*LoraPacketForwarderProfileServiceListResponse, error)
	Get(context.Context, *LoraPacketForwarderProfileServiceGetRequest) (*LoraPacketForwarderProfileServiceGetResponse, error)
	GetByName(context.Context, *LoraPacketForwarderProfileServiceGetByNameRequest) (*LoraPacketForwarderProfileServiceGetByNameResponse, error)
	Update(context.Context, *LoraPacketForwarderProfileServiceUpdateRequest) (*LoraPacketForwarderProfileServiceUpdateResponse, error)
	Delete(context.Context, *LoraPacketForwarderProfileServiceDeleteRequest) (*LoraPacketForwarderProfileServiceDeleteResponse, error)
	mustEmbedUnimplementedLoraPacketForwarderProfileServiceServer()
}

// UnimplementedLoraPacketForwarderProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoraPacketForwarderProfileServiceServer struct {
}

func (UnimplementedLoraPacketForwarderProfileServiceServer) Create(context.Context, *LoraPacketForwarderProfileServiceCreateRequest) (*LoraPacketForwarderProfileServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLoraPacketForwarderProfileServiceServer) List(context.Context, *LoraPacketForwarderProfileServiceListRequest) (*LoraPacketForwarderProfileServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLoraPacketForwarderProfileServiceServer) Get(context.Context, *LoraPacketForwarderProfileServiceGetRequest) (*LoraPacketForwarderProfileServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLoraPacketForwarderProfileServiceServer) GetByName(context.Context, *LoraPacketForwarderProfileServiceGetByNameRequest) (*LoraPacketForwarderProfileServiceGetByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedLoraPacketForwarderProfileServiceServer) Update(context.Context, *LoraPacketForwarderProfileServiceUpdateRequest) (*LoraPacketForwarderProfileServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLoraPacketForwarderProfileServiceServer) Delete(context.Context, *LoraPacketForwarderProfileServiceDeleteRequest) (*LoraPacketForwarderProfileServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLoraPacketForwarderProfileServiceServer) mustEmbedUnimplementedLoraPacketForwarderProfileServiceServer() {
}

// UnsafeLoraPacketForwarderProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoraPacketForwarderProfileServiceServer will
// result in compilation errors.
type UnsafeLoraPacketForwarderProfileServiceServer interface {
	mustEmbedUnimplementedLoraPacketForwarderProfileServiceServer()
}

func RegisterLoraPacketForwarderProfileServiceServer(s grpc.ServiceRegistrar, srv LoraPacketForwarderProfileServiceServer) {
	s.RegisterService(&LoraPacketForwarderProfileService_ServiceDesc, srv)
}

func _LoraPacketForwarderProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoraPacketForwarderProfileServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoraPacketForwarderProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoraPacketForwarderProfileService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoraPacketForwarderProfileServiceServer).Create(ctx, req.(*LoraPacketForwarderProfileServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoraPacketForwarderProfileService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoraPacketForwarderProfileServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoraPacketForwarderProfileServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoraPacketForwarderProfileService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoraPacketForwarderProfileServiceServer).List(ctx, req.(*LoraPacketForwarderProfileServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoraPacketForwarderProfileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoraPacketForwarderProfileServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoraPacketForwarderProfileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoraPacketForwarderProfileService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoraPacketForwarderProfileServiceServer).Get(ctx, req.(*LoraPacketForwarderProfileServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoraPacketForwarderProfileService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoraPacketForwarderProfileServiceGetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoraPacketForwarderProfileServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoraPacketForwarderProfileService_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoraPacketForwarderProfileServiceServer).GetByName(ctx, req.(*LoraPacketForwarderProfileServiceGetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoraPacketForwarderProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoraPacketForwarderProfileServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoraPacketForwarderProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoraPacketForwarderProfileService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoraPacketForwarderProfileServiceServer).Update(ctx, req.(*LoraPacketForwarderProfileServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoraPacketForwarderProfileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoraPacketForwarderProfileServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoraPacketForwarderProfileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoraPacketForwarderProfileService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoraPacketForwarderProfileServiceServer).Delete(ctx, req.(*LoraPacketForwarderProfileServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoraPacketForwarderProfileService_ServiceDesc is the grpc.ServiceDesc for LoraPacketForwarderProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoraPacketForwarderProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tti.gateway.controller.northbound.v1.LoraPacketForwarderProfileService",
	HandlerType: (*LoraPacketForwarderProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LoraPacketForwarderProfileService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LoraPacketForwarderProfileService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LoraPacketForwarderProfileService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _LoraPacketForwarderProfileService_GetByName_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LoraPacketForwarderProfileService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LoraPacketForwarderProfileService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tti/gateway/controller/northbound/v1/profile_services.proto",
}
