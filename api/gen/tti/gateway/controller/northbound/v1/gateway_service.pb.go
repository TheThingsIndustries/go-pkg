// Copyright Â© 2024 The Things Industries B.V.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: tti/gateway/controller/northbound/v1/gateway_service.proto

package northboundv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GatewayServiceClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId  uint64 `protobuf:"fixed64,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Domain     string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	OwnerToken string `protobuf:"bytes,3,opt,name=owner_token,json=ownerToken,proto3" json:"owner_token,omitempty"`
}

func (x *GatewayServiceClaimRequest) Reset() {
	*x = GatewayServiceClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceClaimRequest) ProtoMessage() {}

func (x *GatewayServiceClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceClaimRequest.ProtoReflect.Descriptor instead.
func (*GatewayServiceClaimRequest) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayServiceClaimRequest) GetGatewayId() uint64 {
	if x != nil {
		return x.GatewayId
	}
	return 0
}

func (x *GatewayServiceClaimRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GatewayServiceClaimRequest) GetOwnerToken() string {
	if x != nil {
		return x.OwnerToken
	}
	return ""
}

type GatewayServiceClaimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewayServiceClaimResponse) Reset() {
	*x = GatewayServiceClaimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceClaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceClaimResponse) ProtoMessage() {}

func (x *GatewayServiceClaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceClaimResponse.ProtoReflect.Descriptor instead.
func (*GatewayServiceClaimResponse) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{1}
}

type GatewayServiceUnclaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId uint64 `protobuf:"fixed64,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Domain    string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *GatewayServiceUnclaimRequest) Reset() {
	*x = GatewayServiceUnclaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceUnclaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceUnclaimRequest) ProtoMessage() {}

func (x *GatewayServiceUnclaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceUnclaimRequest.ProtoReflect.Descriptor instead.
func (*GatewayServiceUnclaimRequest) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{2}
}

func (x *GatewayServiceUnclaimRequest) GetGatewayId() uint64 {
	if x != nil {
		return x.GatewayId
	}
	return 0
}

func (x *GatewayServiceUnclaimRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type GatewayServiceUnclaimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewayServiceUnclaimResponse) Reset() {
	*x = GatewayServiceUnclaimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceUnclaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceUnclaimResponse) ProtoMessage() {}

func (x *GatewayServiceUnclaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceUnclaimResponse.ProtoReflect.Descriptor instead.
func (*GatewayServiceUnclaimResponse) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{3}
}

type GatewayServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId uint64 `protobuf:"fixed64,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Domain    string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *GatewayServiceGetRequest) Reset() {
	*x = GatewayServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceGetRequest) ProtoMessage() {}

func (x *GatewayServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceGetRequest.ProtoReflect.Descriptor instead.
func (*GatewayServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{4}
}

func (x *GatewayServiceGetRequest) GetGatewayId() uint64 {
	if x != nil {
		return x.GatewayId
	}
	return 0
}

func (x *GatewayServiceGetRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type GatewayServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway *Gateway `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *GatewayServiceGetResponse) Reset() {
	*x = GatewayServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceGetResponse) ProtoMessage() {}

func (x *GatewayServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceGetResponse.ProtoReflect.Descriptor instead.
func (*GatewayServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{5}
}

func (x *GatewayServiceGetResponse) GetGateway() *Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

type GatewayServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId                    uint64          `protobuf:"fixed64,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Domain                       string          `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	WifiProfileId                *ProfileIDValue `protobuf:"bytes,3,opt,name=wifi_profile_id,json=wifiProfileId,proto3" json:"wifi_profile_id,omitempty"`
	EthernetProfileId            *ProfileIDValue `protobuf:"bytes,4,opt,name=ethernet_profile_id,json=ethernetProfileId,proto3" json:"ethernet_profile_id,omitempty"`
	GeolocationProfileId         *ProfileIDValue `protobuf:"bytes,5,opt,name=geolocation_profile_id,json=geolocationProfileId,proto3" json:"geolocation_profile_id,omitempty"`
	LoraPacketForwarderProfileId *ProfileIDValue `protobuf:"bytes,6,opt,name=lora_packet_forwarder_profile_id,json=loraPacketForwarderProfileId,proto3" json:"lora_packet_forwarder_profile_id,omitempty"`
}

func (x *GatewayServiceUpdateRequest) Reset() {
	*x = GatewayServiceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceUpdateRequest) ProtoMessage() {}

func (x *GatewayServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*GatewayServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{6}
}

func (x *GatewayServiceUpdateRequest) GetGatewayId() uint64 {
	if x != nil {
		return x.GatewayId
	}
	return 0
}

func (x *GatewayServiceUpdateRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GatewayServiceUpdateRequest) GetWifiProfileId() *ProfileIDValue {
	if x != nil {
		return x.WifiProfileId
	}
	return nil
}

func (x *GatewayServiceUpdateRequest) GetEthernetProfileId() *ProfileIDValue {
	if x != nil {
		return x.EthernetProfileId
	}
	return nil
}

func (x *GatewayServiceUpdateRequest) GetGeolocationProfileId() *ProfileIDValue {
	if x != nil {
		return x.GeolocationProfileId
	}
	return nil
}

func (x *GatewayServiceUpdateRequest) GetLoraPacketForwarderProfileId() *ProfileIDValue {
	if x != nil {
		return x.LoraPacketForwarderProfileId
	}
	return nil
}

type GatewayServiceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewayServiceUpdateResponse) Reset() {
	*x = GatewayServiceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceUpdateResponse) ProtoMessage() {}

func (x *GatewayServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*GatewayServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{7}
}

type GatewayServiceSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId uint64 `protobuf:"fixed64,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Domain    string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *GatewayServiceSubscribeRequest) Reset() {
	*x = GatewayServiceSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceSubscribeRequest) ProtoMessage() {}

func (x *GatewayServiceSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceSubscribeRequest.ProtoReflect.Descriptor instead.
func (*GatewayServiceSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{8}
}

func (x *GatewayServiceSubscribeRequest) GetGatewayId() uint64 {
	if x != nil {
		return x.GatewayId
	}
	return 0
}

func (x *GatewayServiceSubscribeRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type GatewayServiceSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//
	//	*GatewayServiceSubscribeResponse_Gateway
	//	*GatewayServiceSubscribeResponse_Location
	//	*GatewayServiceSubscribeResponse_SystemStatus
	//	*GatewayServiceSubscribeResponse_Session
	//	*GatewayServiceSubscribeResponse_Cellular
	//	*GatewayServiceSubscribeResponse_Wifi
	//	*GatewayServiceSubscribeResponse_Ethernet
	//	*GatewayServiceSubscribeResponse_LoraPacketForwarder
	Update isGatewayServiceSubscribeResponse_Update `protobuf_oneof:"update"`
}

func (x *GatewayServiceSubscribeResponse) Reset() {
	*x = GatewayServiceSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceSubscribeResponse) ProtoMessage() {}

func (x *GatewayServiceSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceSubscribeResponse.ProtoReflect.Descriptor instead.
func (*GatewayServiceSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{9}
}

func (m *GatewayServiceSubscribeResponse) GetUpdate() isGatewayServiceSubscribeResponse_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *GatewayServiceSubscribeResponse) GetGateway() *Gateway {
	if x, ok := x.GetUpdate().(*GatewayServiceSubscribeResponse_Gateway); ok {
		return x.Gateway
	}
	return nil
}

func (x *GatewayServiceSubscribeResponse) GetLocation() *GatewayLocation {
	if x, ok := x.GetUpdate().(*GatewayServiceSubscribeResponse_Location); ok {
		return x.Location
	}
	return nil
}

func (x *GatewayServiceSubscribeResponse) GetSystemStatus() *GatewaySystemStatus {
	if x, ok := x.GetUpdate().(*GatewayServiceSubscribeResponse_SystemStatus); ok {
		return x.SystemStatus
	}
	return nil
}

func (x *GatewayServiceSubscribeResponse) GetSession() *GatewaySession {
	if x, ok := x.GetUpdate().(*GatewayServiceSubscribeResponse_Session); ok {
		return x.Session
	}
	return nil
}

func (x *GatewayServiceSubscribeResponse) GetCellular() *GatewaySessionCellular {
	if x, ok := x.GetUpdate().(*GatewayServiceSubscribeResponse_Cellular); ok {
		return x.Cellular
	}
	return nil
}

func (x *GatewayServiceSubscribeResponse) GetWifi() *GatewaySessionWifi {
	if x, ok := x.GetUpdate().(*GatewayServiceSubscribeResponse_Wifi); ok {
		return x.Wifi
	}
	return nil
}

func (x *GatewayServiceSubscribeResponse) GetEthernet() *GatewaySessionEthernet {
	if x, ok := x.GetUpdate().(*GatewayServiceSubscribeResponse_Ethernet); ok {
		return x.Ethernet
	}
	return nil
}

func (x *GatewayServiceSubscribeResponse) GetLoraPacketForwarder() *GatewaySessionLoraPacketForwarder {
	if x, ok := x.GetUpdate().(*GatewayServiceSubscribeResponse_LoraPacketForwarder); ok {
		return x.LoraPacketForwarder
	}
	return nil
}

type isGatewayServiceSubscribeResponse_Update interface {
	isGatewayServiceSubscribeResponse_Update()
}

type GatewayServiceSubscribeResponse_Gateway struct {
	Gateway *Gateway `protobuf:"bytes,1,opt,name=gateway,proto3,oneof"`
}

type GatewayServiceSubscribeResponse_Location struct {
	Location *GatewayLocation `protobuf:"bytes,2,opt,name=location,proto3,oneof"`
}

type GatewayServiceSubscribeResponse_SystemStatus struct {
	SystemStatus *GatewaySystemStatus `protobuf:"bytes,3,opt,name=system_status,json=systemStatus,proto3,oneof"`
}

type GatewayServiceSubscribeResponse_Session struct {
	Session *GatewaySession `protobuf:"bytes,4,opt,name=session,proto3,oneof"`
}

type GatewayServiceSubscribeResponse_Cellular struct {
	Cellular *GatewaySessionCellular `protobuf:"bytes,5,opt,name=cellular,proto3,oneof"`
}

type GatewayServiceSubscribeResponse_Wifi struct {
	Wifi *GatewaySessionWifi `protobuf:"bytes,6,opt,name=wifi,proto3,oneof"`
}

type GatewayServiceSubscribeResponse_Ethernet struct {
	Ethernet *GatewaySessionEthernet `protobuf:"bytes,7,opt,name=ethernet,proto3,oneof"`
}

type GatewayServiceSubscribeResponse_LoraPacketForwarder struct {
	LoraPacketForwarder *GatewaySessionLoraPacketForwarder `protobuf:"bytes,8,opt,name=lora_packet_forwarder,json=loraPacketForwarder,proto3,oneof"`
}

func (*GatewayServiceSubscribeResponse_Gateway) isGatewayServiceSubscribeResponse_Update() {}

func (*GatewayServiceSubscribeResponse_Location) isGatewayServiceSubscribeResponse_Update() {}

func (*GatewayServiceSubscribeResponse_SystemStatus) isGatewayServiceSubscribeResponse_Update() {}

func (*GatewayServiceSubscribeResponse_Session) isGatewayServiceSubscribeResponse_Update() {}

func (*GatewayServiceSubscribeResponse_Cellular) isGatewayServiceSubscribeResponse_Update() {}

func (*GatewayServiceSubscribeResponse_Wifi) isGatewayServiceSubscribeResponse_Update() {}

func (*GatewayServiceSubscribeResponse_Ethernet) isGatewayServiceSubscribeResponse_Update() {}

func (*GatewayServiceSubscribeResponse_LoraPacketForwarder) isGatewayServiceSubscribeResponse_Update() {
}

type GatewayServiceScanWiFiAccessPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId uint64 `protobuf:"fixed64,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Domain    string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *GatewayServiceScanWiFiAccessPointsRequest) Reset() {
	*x = GatewayServiceScanWiFiAccessPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceScanWiFiAccessPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceScanWiFiAccessPointsRequest) ProtoMessage() {}

func (x *GatewayServiceScanWiFiAccessPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceScanWiFiAccessPointsRequest.ProtoReflect.Descriptor instead.
func (*GatewayServiceScanWiFiAccessPointsRequest) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{10}
}

func (x *GatewayServiceScanWiFiAccessPointsRequest) GetGatewayId() uint64 {
	if x != nil {
		return x.GatewayId
	}
	return 0
}

func (x *GatewayServiceScanWiFiAccessPointsRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type GatewayServiceScanWiFiAccessPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cached       bool               `protobuf:"varint,1,opt,name=cached,proto3" json:"cached,omitempty"`
	AccessPoints []*WifiAccessPoint `protobuf:"bytes,2,rep,name=access_points,json=accessPoints,proto3" json:"access_points,omitempty"`
}

func (x *GatewayServiceScanWiFiAccessPointsResponse) Reset() {
	*x = GatewayServiceScanWiFiAccessPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayServiceScanWiFiAccessPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayServiceScanWiFiAccessPointsResponse) ProtoMessage() {}

func (x *GatewayServiceScanWiFiAccessPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayServiceScanWiFiAccessPointsResponse.ProtoReflect.Descriptor instead.
func (*GatewayServiceScanWiFiAccessPointsResponse) Descriptor() ([]byte, []int) {
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP(), []int{11}
}

func (x *GatewayServiceScanWiFiAccessPointsResponse) GetCached() bool {
	if x != nil {
		return x.Cached
	}
	return false
}

func (x *GatewayServiceScanWiFiAccessPointsResponse) GetAccessPoints() []*WifiAccessPoint {
	if x != nil {
		return x.AccessPoints
	}
	return nil
}

var File_tti_gateway_controller_northbound_v1_gateway_service_proto protoreflect.FileDescriptor

var file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x74, 0x74, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x74, 0x74,
	0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x31, 0x74, 0x74, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x32, 0x74, 0x74, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x72, 0x74, 0x68,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x01, 0x0a, 0x1a, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6a, 0xba, 0x48, 0x67, 0x72, 0x65, 0x18, 0x64, 0x32, 0x61,
	0x5e, 0x28, 0x3f, 0x3a, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7c,
	0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5d, 0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29,
	0x5c, 0x2e, 0x29, 0x2a, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7c,
	0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5d, 0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29,
	0x24, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x0b, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6a, 0xba, 0x48, 0x67, 0x72, 0x65, 0x18, 0x64, 0x32, 0x61,
	0x5e, 0x28, 0x3f, 0x3a, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7c,
	0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5d, 0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29,
	0x5c, 0x2e, 0x29, 0x2a, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7c,
	0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5d, 0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29,
	0x24, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x18, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6a, 0xba, 0x48, 0x67, 0x72, 0x65, 0x18, 0x64,
	0x32, 0x61, 0x5e, 0x28, 0x3f, 0x3a, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x7c, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x29, 0x5c, 0x2e, 0x29, 0x2a, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x7c, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x29, 0x24, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x64, 0x0a, 0x19, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x74, 0x69, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x22, 0xef, 0x04, 0x0a, 0x1b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64,
	0x12, 0x82, 0x01, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x6a, 0xba, 0x48, 0x67, 0x72, 0x65, 0x18, 0x64, 0x32, 0x61, 0x5e, 0x28, 0x3f, 0x3a,
	0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x28, 0x3f, 0x3a, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d,
	0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x5c, 0x2e, 0x29, 0x2a,
	0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x28, 0x3f, 0x3a, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d,
	0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x13, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x44, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x16, 0x67, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x74, 0x69, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x7c, 0x0a, 0x20, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x6c, 0x6f, 0x72, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x1e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6a, 0xba, 0x48, 0x67, 0x72, 0x65, 0x18, 0x64, 0x32,
	0x61, 0x5e, 0x28, 0x3f, 0x3a, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x7c, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x5c, 0x2e, 0x29, 0x2a, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x7c, 0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x24, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x86, 0x06, 0x0a, 0x1f, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x53, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x74,
	0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60,
	0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x50, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f,
	0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c,
	0x61, 0x72, 0x48, 0x00, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x4e,
	0x0a, 0x04, 0x77, 0x69, 0x66, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74,
	0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x66, 0x69, 0x48, 0x00, 0x52, 0x04, 0x77, 0x69, 0x66, 0x69, 0x12, 0x5a,
	0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x7d, 0x0a, 0x15, 0x6c, 0x6f,
	0x72, 0x61, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x74, 0x74, 0x69, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x72, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x6f, 0x72, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x29, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x57, 0x69, 0x46, 0x69, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64,
	0x12, 0x82, 0x01, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x6a, 0xba, 0x48, 0x67, 0x72, 0x65, 0x18, 0x64, 0x32, 0x61, 0x5e, 0x28, 0x3f, 0x3a,
	0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x28, 0x3f, 0x3a, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d,
	0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x5c, 0x2e, 0x29, 0x2a,
	0x28, 0x3f, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x28, 0x3f, 0x3a, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d,
	0x3f, 0x29, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x24, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x2a, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x57, 0x69, 0x46, 0x69,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72,
	0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0xa8, 0x07, 0x0a, 0x0e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x05,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x40, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x07, 0x55,
	0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x42, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x74, 0x74, 0x69,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x86, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x3e, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72,
	0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x44, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45,
	0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0xb9, 0x01, 0x0a, 0x14, 0x53, 0x63, 0x61, 0x6e,
	0x57, 0x69, 0x46, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x4f, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x57, 0x69, 0x46, 0x69, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x50, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x57, 0x69, 0x46, 0x69, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0xc7, 0x02, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x74, 0x69, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x42, 0x13, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x51, 0x67, 0x6f, 0x2e, 0x74, 0x68, 0x65, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x74, 0x69, 0x2f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f,
	0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x6f,
	0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x54, 0x47, 0x43,
	0x4e, 0xaa, 0x02, 0x24, 0x54, 0x74, 0x69, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x72, 0x74, 0x68,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x24, 0x54, 0x74, 0x69, 0x5c, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5c, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x30, 0x54, 0x74, 0x69, 0x5c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5c, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x28, 0x54, 0x74, 0x69, 0x3a, 0x3a, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x3a, 0x3a, 0x4e,
	0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescOnce sync.Once
	file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescData = file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDesc
)

func file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescGZIP() []byte {
	file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescOnce.Do(func() {
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescData)
	})
	return file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDescData
}

var file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_tti_gateway_controller_northbound_v1_gateway_service_proto_goTypes = []interface{}{
	(*GatewayServiceClaimRequest)(nil),                 // 0: tti.gateway.controller.northbound.v1.GatewayServiceClaimRequest
	(*GatewayServiceClaimResponse)(nil),                // 1: tti.gateway.controller.northbound.v1.GatewayServiceClaimResponse
	(*GatewayServiceUnclaimRequest)(nil),               // 2: tti.gateway.controller.northbound.v1.GatewayServiceUnclaimRequest
	(*GatewayServiceUnclaimResponse)(nil),              // 3: tti.gateway.controller.northbound.v1.GatewayServiceUnclaimResponse
	(*GatewayServiceGetRequest)(nil),                   // 4: tti.gateway.controller.northbound.v1.GatewayServiceGetRequest
	(*GatewayServiceGetResponse)(nil),                  // 5: tti.gateway.controller.northbound.v1.GatewayServiceGetResponse
	(*GatewayServiceUpdateRequest)(nil),                // 6: tti.gateway.controller.northbound.v1.GatewayServiceUpdateRequest
	(*GatewayServiceUpdateResponse)(nil),               // 7: tti.gateway.controller.northbound.v1.GatewayServiceUpdateResponse
	(*GatewayServiceSubscribeRequest)(nil),             // 8: tti.gateway.controller.northbound.v1.GatewayServiceSubscribeRequest
	(*GatewayServiceSubscribeResponse)(nil),            // 9: tti.gateway.controller.northbound.v1.GatewayServiceSubscribeResponse
	(*GatewayServiceScanWiFiAccessPointsRequest)(nil),  // 10: tti.gateway.controller.northbound.v1.GatewayServiceScanWiFiAccessPointsRequest
	(*GatewayServiceScanWiFiAccessPointsResponse)(nil), // 11: tti.gateway.controller.northbound.v1.GatewayServiceScanWiFiAccessPointsResponse
	(*Gateway)(nil),                                    // 12: tti.gateway.controller.northbound.v1.Gateway
	(*ProfileIDValue)(nil),                             // 13: tti.gateway.controller.northbound.v1.ProfileIDValue
	(*GatewayLocation)(nil),                            // 14: tti.gateway.controller.northbound.v1.GatewayLocation
	(*GatewaySystemStatus)(nil),                        // 15: tti.gateway.controller.northbound.v1.GatewaySystemStatus
	(*GatewaySession)(nil),                             // 16: tti.gateway.controller.northbound.v1.GatewaySession
	(*GatewaySessionCellular)(nil),                     // 17: tti.gateway.controller.northbound.v1.GatewaySessionCellular
	(*GatewaySessionWifi)(nil),                         // 18: tti.gateway.controller.northbound.v1.GatewaySessionWifi
	(*GatewaySessionEthernet)(nil),                     // 19: tti.gateway.controller.northbound.v1.GatewaySessionEthernet
	(*GatewaySessionLoraPacketForwarder)(nil),          // 20: tti.gateway.controller.northbound.v1.GatewaySessionLoraPacketForwarder
	(*WifiAccessPoint)(nil),                            // 21: tti.gateway.controller.northbound.v1.WifiAccessPoint
}
var file_tti_gateway_controller_northbound_v1_gateway_service_proto_depIdxs = []int32{
	12, // 0: tti.gateway.controller.northbound.v1.GatewayServiceGetResponse.gateway:type_name -> tti.gateway.controller.northbound.v1.Gateway
	13, // 1: tti.gateway.controller.northbound.v1.GatewayServiceUpdateRequest.wifi_profile_id:type_name -> tti.gateway.controller.northbound.v1.ProfileIDValue
	13, // 2: tti.gateway.controller.northbound.v1.GatewayServiceUpdateRequest.ethernet_profile_id:type_name -> tti.gateway.controller.northbound.v1.ProfileIDValue
	13, // 3: tti.gateway.controller.northbound.v1.GatewayServiceUpdateRequest.geolocation_profile_id:type_name -> tti.gateway.controller.northbound.v1.ProfileIDValue
	13, // 4: tti.gateway.controller.northbound.v1.GatewayServiceUpdateRequest.lora_packet_forwarder_profile_id:type_name -> tti.gateway.controller.northbound.v1.ProfileIDValue
	12, // 5: tti.gateway.controller.northbound.v1.GatewayServiceSubscribeResponse.gateway:type_name -> tti.gateway.controller.northbound.v1.Gateway
	14, // 6: tti.gateway.controller.northbound.v1.GatewayServiceSubscribeResponse.location:type_name -> tti.gateway.controller.northbound.v1.GatewayLocation
	15, // 7: tti.gateway.controller.northbound.v1.GatewayServiceSubscribeResponse.system_status:type_name -> tti.gateway.controller.northbound.v1.GatewaySystemStatus
	16, // 8: tti.gateway.controller.northbound.v1.GatewayServiceSubscribeResponse.session:type_name -> tti.gateway.controller.northbound.v1.GatewaySession
	17, // 9: tti.gateway.controller.northbound.v1.GatewayServiceSubscribeResponse.cellular:type_name -> tti.gateway.controller.northbound.v1.GatewaySessionCellular
	18, // 10: tti.gateway.controller.northbound.v1.GatewayServiceSubscribeResponse.wifi:type_name -> tti.gateway.controller.northbound.v1.GatewaySessionWifi
	19, // 11: tti.gateway.controller.northbound.v1.GatewayServiceSubscribeResponse.ethernet:type_name -> tti.gateway.controller.northbound.v1.GatewaySessionEthernet
	20, // 12: tti.gateway.controller.northbound.v1.GatewayServiceSubscribeResponse.lora_packet_forwarder:type_name -> tti.gateway.controller.northbound.v1.GatewaySessionLoraPacketForwarder
	21, // 13: tti.gateway.controller.northbound.v1.GatewayServiceScanWiFiAccessPointsResponse.access_points:type_name -> tti.gateway.controller.northbound.v1.WifiAccessPoint
	0,  // 14: tti.gateway.controller.northbound.v1.GatewayService.Claim:input_type -> tti.gateway.controller.northbound.v1.GatewayServiceClaimRequest
	2,  // 15: tti.gateway.controller.northbound.v1.GatewayService.Unclaim:input_type -> tti.gateway.controller.northbound.v1.GatewayServiceUnclaimRequest
	4,  // 16: tti.gateway.controller.northbound.v1.GatewayService.Get:input_type -> tti.gateway.controller.northbound.v1.GatewayServiceGetRequest
	6,  // 17: tti.gateway.controller.northbound.v1.GatewayService.Update:input_type -> tti.gateway.controller.northbound.v1.GatewayServiceUpdateRequest
	8,  // 18: tti.gateway.controller.northbound.v1.GatewayService.Subscribe:input_type -> tti.gateway.controller.northbound.v1.GatewayServiceSubscribeRequest
	10, // 19: tti.gateway.controller.northbound.v1.GatewayService.ScanWiFiAccessPoints:input_type -> tti.gateway.controller.northbound.v1.GatewayServiceScanWiFiAccessPointsRequest
	1,  // 20: tti.gateway.controller.northbound.v1.GatewayService.Claim:output_type -> tti.gateway.controller.northbound.v1.GatewayServiceClaimResponse
	3,  // 21: tti.gateway.controller.northbound.v1.GatewayService.Unclaim:output_type -> tti.gateway.controller.northbound.v1.GatewayServiceUnclaimResponse
	5,  // 22: tti.gateway.controller.northbound.v1.GatewayService.Get:output_type -> tti.gateway.controller.northbound.v1.GatewayServiceGetResponse
	7,  // 23: tti.gateway.controller.northbound.v1.GatewayService.Update:output_type -> tti.gateway.controller.northbound.v1.GatewayServiceUpdateResponse
	9,  // 24: tti.gateway.controller.northbound.v1.GatewayService.Subscribe:output_type -> tti.gateway.controller.northbound.v1.GatewayServiceSubscribeResponse
	11, // 25: tti.gateway.controller.northbound.v1.GatewayService.ScanWiFiAccessPoints:output_type -> tti.gateway.controller.northbound.v1.GatewayServiceScanWiFiAccessPointsResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_tti_gateway_controller_northbound_v1_gateway_service_proto_init() }
func file_tti_gateway_controller_northbound_v1_gateway_service_proto_init() {
	if File_tti_gateway_controller_northbound_v1_gateway_service_proto != nil {
		return
	}
	file_tti_gateway_controller_northbound_v1_common_proto_init()
	file_tti_gateway_controller_northbound_v1_gateway_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceClaimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceUnclaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceUnclaimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceScanWiFiAccessPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayServiceScanWiFiAccessPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*GatewayServiceSubscribeResponse_Gateway)(nil),
		(*GatewayServiceSubscribeResponse_Location)(nil),
		(*GatewayServiceSubscribeResponse_SystemStatus)(nil),
		(*GatewayServiceSubscribeResponse_Session)(nil),
		(*GatewayServiceSubscribeResponse_Cellular)(nil),
		(*GatewayServiceSubscribeResponse_Wifi)(nil),
		(*GatewayServiceSubscribeResponse_Ethernet)(nil),
		(*GatewayServiceSubscribeResponse_LoraPacketForwarder)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tti_gateway_controller_northbound_v1_gateway_service_proto_goTypes,
		DependencyIndexes: file_tti_gateway_controller_northbound_v1_gateway_service_proto_depIdxs,
		MessageInfos:      file_tti_gateway_controller_northbound_v1_gateway_service_proto_msgTypes,
	}.Build()
	File_tti_gateway_controller_northbound_v1_gateway_service_proto = out.File
	file_tti_gateway_controller_northbound_v1_gateway_service_proto_rawDesc = nil
	file_tti_gateway_controller_northbound_v1_gateway_service_proto_goTypes = nil
	file_tti_gateway_controller_northbound_v1_gateway_service_proto_depIdxs = nil
}
