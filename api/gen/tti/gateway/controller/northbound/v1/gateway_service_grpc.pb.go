// Copyright Â© 2024 The Things Industries B.V.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: tti/gateway/controller/northbound/v1/gateway_service.proto

package northboundv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GatewayService_Claim_FullMethodName                = "/tti.gateway.controller.northbound.v1.GatewayService/Claim"
	GatewayService_Unclaim_FullMethodName              = "/tti.gateway.controller.northbound.v1.GatewayService/Unclaim"
	GatewayService_Get_FullMethodName                  = "/tti.gateway.controller.northbound.v1.GatewayService/Get"
	GatewayService_GetLastLocation_FullMethodName      = "/tti.gateway.controller.northbound.v1.GatewayService/GetLastLocation"
	GatewayService_Update_FullMethodName               = "/tti.gateway.controller.northbound.v1.GatewayService/Update"
	GatewayService_Subscribe_FullMethodName            = "/tti.gateway.controller.northbound.v1.GatewayService/Subscribe"
	GatewayService_ScanWiFiAccessPoints_FullMethodName = "/tti.gateway.controller.northbound.v1.GatewayService/ScanWiFiAccessPoints"
)

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayServiceClient interface {
	Claim(ctx context.Context, in *GatewayServiceClaimRequest, opts ...grpc.CallOption) (*GatewayServiceClaimResponse, error)
	Unclaim(ctx context.Context, in *GatewayServiceUnclaimRequest, opts ...grpc.CallOption) (*GatewayServiceUnclaimResponse, error)
	Get(ctx context.Context, in *GatewayServiceGetRequest, opts ...grpc.CallOption) (*GatewayServiceGetResponse, error)
	GetLastLocation(ctx context.Context, in *GatewayServiceGetLastLocationRequest, opts ...grpc.CallOption) (*GatewayServiceGetLastLocationResponse, error)
	Update(ctx context.Context, in *GatewayServiceUpdateRequest, opts ...grpc.CallOption) (*GatewayServiceUpdateResponse, error)
	Subscribe(ctx context.Context, in *GatewayServiceSubscribeRequest, opts ...grpc.CallOption) (GatewayService_SubscribeClient, error)
	ScanWiFiAccessPoints(ctx context.Context, in *GatewayServiceScanWiFiAccessPointsRequest, opts ...grpc.CallOption) (*GatewayServiceScanWiFiAccessPointsResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) Claim(ctx context.Context, in *GatewayServiceClaimRequest, opts ...grpc.CallOption) (*GatewayServiceClaimResponse, error) {
	out := new(GatewayServiceClaimResponse)
	err := c.cc.Invoke(ctx, GatewayService_Claim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Unclaim(ctx context.Context, in *GatewayServiceUnclaimRequest, opts ...grpc.CallOption) (*GatewayServiceUnclaimResponse, error) {
	out := new(GatewayServiceUnclaimResponse)
	err := c.cc.Invoke(ctx, GatewayService_Unclaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Get(ctx context.Context, in *GatewayServiceGetRequest, opts ...grpc.CallOption) (*GatewayServiceGetResponse, error) {
	out := new(GatewayServiceGetResponse)
	err := c.cc.Invoke(ctx, GatewayService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetLastLocation(ctx context.Context, in *GatewayServiceGetLastLocationRequest, opts ...grpc.CallOption) (*GatewayServiceGetLastLocationResponse, error) {
	out := new(GatewayServiceGetLastLocationResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetLastLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Update(ctx context.Context, in *GatewayServiceUpdateRequest, opts ...grpc.CallOption) (*GatewayServiceUpdateResponse, error) {
	out := new(GatewayServiceUpdateResponse)
	err := c.cc.Invoke(ctx, GatewayService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Subscribe(ctx context.Context, in *GatewayServiceSubscribeRequest, opts ...grpc.CallOption) (GatewayService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &GatewayService_ServiceDesc.Streams[0], GatewayService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayService_SubscribeClient interface {
	Recv() (*GatewayServiceSubscribeResponse, error)
	grpc.ClientStream
}

type gatewayServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *gatewayServiceSubscribeClient) Recv() (*GatewayServiceSubscribeResponse, error) {
	m := new(GatewayServiceSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayServiceClient) ScanWiFiAccessPoints(ctx context.Context, in *GatewayServiceScanWiFiAccessPointsRequest, opts ...grpc.CallOption) (*GatewayServiceScanWiFiAccessPointsResponse, error) {
	out := new(GatewayServiceScanWiFiAccessPointsResponse)
	err := c.cc.Invoke(ctx, GatewayService_ScanWiFiAccessPoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility
type GatewayServiceServer interface {
	Claim(context.Context, *GatewayServiceClaimRequest) (*GatewayServiceClaimResponse, error)
	Unclaim(context.Context, *GatewayServiceUnclaimRequest) (*GatewayServiceUnclaimResponse, error)
	Get(context.Context, *GatewayServiceGetRequest) (*GatewayServiceGetResponse, error)
	GetLastLocation(context.Context, *GatewayServiceGetLastLocationRequest) (*GatewayServiceGetLastLocationResponse, error)
	Update(context.Context, *GatewayServiceUpdateRequest) (*GatewayServiceUpdateResponse, error)
	Subscribe(*GatewayServiceSubscribeRequest, GatewayService_SubscribeServer) error
	ScanWiFiAccessPoints(context.Context, *GatewayServiceScanWiFiAccessPointsRequest) (*GatewayServiceScanWiFiAccessPointsResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServiceServer struct {
}

func (UnimplementedGatewayServiceServer) Claim(context.Context, *GatewayServiceClaimRequest) (*GatewayServiceClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (UnimplementedGatewayServiceServer) Unclaim(context.Context, *GatewayServiceUnclaimRequest) (*GatewayServiceUnclaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unclaim not implemented")
}
func (UnimplementedGatewayServiceServer) Get(context.Context, *GatewayServiceGetRequest) (*GatewayServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGatewayServiceServer) GetLastLocation(context.Context, *GatewayServiceGetLastLocationRequest) (*GatewayServiceGetLastLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastLocation not implemented")
}
func (UnimplementedGatewayServiceServer) Update(context.Context, *GatewayServiceUpdateRequest) (*GatewayServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGatewayServiceServer) Subscribe(*GatewayServiceSubscribeRequest, GatewayService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedGatewayServiceServer) ScanWiFiAccessPoints(context.Context, *GatewayServiceScanWiFiAccessPointsRequest) (*GatewayServiceScanWiFiAccessPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanWiFiAccessPoints not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayServiceClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Claim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Claim(ctx, req.(*GatewayServiceClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Unclaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayServiceUnclaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Unclaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Unclaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Unclaim(ctx, req.(*GatewayServiceUnclaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Get(ctx, req.(*GatewayServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetLastLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayServiceGetLastLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetLastLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetLastLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetLastLocation(ctx, req.(*GatewayServiceGetLastLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Update(ctx, req.(*GatewayServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayServiceSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServiceServer).Subscribe(m, &gatewayServiceSubscribeServer{stream})
}

type GatewayService_SubscribeServer interface {
	Send(*GatewayServiceSubscribeResponse) error
	grpc.ServerStream
}

type gatewayServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *gatewayServiceSubscribeServer) Send(m *GatewayServiceSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GatewayService_ScanWiFiAccessPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayServiceScanWiFiAccessPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ScanWiFiAccessPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ScanWiFiAccessPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ScanWiFiAccessPoints(ctx, req.(*GatewayServiceScanWiFiAccessPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tti.gateway.controller.northbound.v1.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Claim",
			Handler:    _GatewayService_Claim_Handler,
		},
		{
			MethodName: "Unclaim",
			Handler:    _GatewayService_Unclaim_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GatewayService_Get_Handler,
		},
		{
			MethodName: "GetLastLocation",
			Handler:    _GatewayService_GetLastLocation_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GatewayService_Update_Handler,
		},
		{
			MethodName: "ScanWiFiAccessPoints",
			Handler:    _GatewayService_ScanWiFiAccessPoints_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _GatewayService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tti/gateway/controller/northbound/v1/gateway_service.proto",
}
