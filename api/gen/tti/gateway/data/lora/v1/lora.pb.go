// Copyright Â© 2024 The Things Industries B.V.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: tti/gateway/data/lora/v1/lora.proto

package lorav1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Bandwidth int32

const (
	Bandwidth_BANDWIDTH_UNSPECIFIED Bandwidth = 0
	Bandwidth_BANDWIDTH_125_KHZ     Bandwidth = 1
	Bandwidth_BANDWIDTH_250_KHZ     Bandwidth = 2
	Bandwidth_BANDWIDTH_500_KHZ     Bandwidth = 3
)

// Enum value maps for Bandwidth.
var (
	Bandwidth_name = map[int32]string{
		0: "BANDWIDTH_UNSPECIFIED",
		1: "BANDWIDTH_125_KHZ",
		2: "BANDWIDTH_250_KHZ",
		3: "BANDWIDTH_500_KHZ",
	}
	Bandwidth_value = map[string]int32{
		"BANDWIDTH_UNSPECIFIED": 0,
		"BANDWIDTH_125_KHZ":     1,
		"BANDWIDTH_250_KHZ":     2,
		"BANDWIDTH_500_KHZ":     3,
	}
)

func (x Bandwidth) Enum() *Bandwidth {
	p := new(Bandwidth)
	*p = x
	return p
}

func (x Bandwidth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bandwidth) Descriptor() protoreflect.EnumDescriptor {
	return file_tti_gateway_data_lora_v1_lora_proto_enumTypes[0].Descriptor()
}

func (Bandwidth) Type() protoreflect.EnumType {
	return &file_tti_gateway_data_lora_v1_lora_proto_enumTypes[0]
}

func (x Bandwidth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bandwidth.Descriptor instead.
func (Bandwidth) EnumDescriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{0}
}

type CodeRate int32

const (
	CodeRate_CODE_RATE_4_5 CodeRate = 0
	CodeRate_CODE_RATE_4_6 CodeRate = 1
	CodeRate_CODE_RATE_4_7 CodeRate = 2
	CodeRate_CODE_RATE_4_8 CodeRate = 3
)

// Enum value maps for CodeRate.
var (
	CodeRate_name = map[int32]string{
		0: "CODE_RATE_4_5",
		1: "CODE_RATE_4_6",
		2: "CODE_RATE_4_7",
		3: "CODE_RATE_4_8",
	}
	CodeRate_value = map[string]int32{
		"CODE_RATE_4_5": 0,
		"CODE_RATE_4_6": 1,
		"CODE_RATE_4_7": 2,
		"CODE_RATE_4_8": 3,
	}
)

func (x CodeRate) Enum() *CodeRate {
	p := new(CodeRate)
	*p = x
	return p
}

func (x CodeRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeRate) Descriptor() protoreflect.EnumDescriptor {
	return file_tti_gateway_data_lora_v1_lora_proto_enumTypes[1].Descriptor()
}

func (CodeRate) Type() protoreflect.EnumType {
	return &file_tti_gateway_data_lora_v1_lora_proto_enumTypes[1]
}

func (x CodeRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeRate.Descriptor instead.
func (CodeRate) EnumDescriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{1}
}

type TransmitChannel_ListenBeforeTalk_ScanTime int32

const (
	TransmitChannel_ListenBeforeTalk_SCAN_TIME_UNSPECIFIED TransmitChannel_ListenBeforeTalk_ScanTime = 0
	TransmitChannel_ListenBeforeTalk_SCAN_TIME_128_US      TransmitChannel_ListenBeforeTalk_ScanTime = 1
	TransmitChannel_ListenBeforeTalk_SCAN_TIME_5000_US     TransmitChannel_ListenBeforeTalk_ScanTime = 2
)

// Enum value maps for TransmitChannel_ListenBeforeTalk_ScanTime.
var (
	TransmitChannel_ListenBeforeTalk_ScanTime_name = map[int32]string{
		0: "SCAN_TIME_UNSPECIFIED",
		1: "SCAN_TIME_128_US",
		2: "SCAN_TIME_5000_US",
	}
	TransmitChannel_ListenBeforeTalk_ScanTime_value = map[string]int32{
		"SCAN_TIME_UNSPECIFIED": 0,
		"SCAN_TIME_128_US":      1,
		"SCAN_TIME_5000_US":     2,
	}
)

func (x TransmitChannel_ListenBeforeTalk_ScanTime) Enum() *TransmitChannel_ListenBeforeTalk_ScanTime {
	p := new(TransmitChannel_ListenBeforeTalk_ScanTime)
	*p = x
	return p
}

func (x TransmitChannel_ListenBeforeTalk_ScanTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransmitChannel_ListenBeforeTalk_ScanTime) Descriptor() protoreflect.EnumDescriptor {
	return file_tti_gateway_data_lora_v1_lora_proto_enumTypes[2].Descriptor()
}

func (TransmitChannel_ListenBeforeTalk_ScanTime) Type() protoreflect.EnumType {
	return &file_tti_gateway_data_lora_v1_lora_proto_enumTypes[2]
}

func (x TransmitChannel_ListenBeforeTalk_ScanTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransmitChannel_ListenBeforeTalk_ScanTime.Descriptor instead.
func (TransmitChannel_ListenBeforeTalk_ScanTime) EnumDescriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{2, 0, 0}
}

type Board struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RfChain0 *Board_RFChain                 `protobuf:"bytes,2,opt,name=rf_chain0,json=rfChain0,proto3" json:"rf_chain0,omitempty"`
	RfChain1 *Board_RFChain                 `protobuf:"bytes,3,opt,name=rf_chain1,json=rfChain1,proto3" json:"rf_chain1,omitempty"`
	Ifs      *Board_IntermediateFrequencies `protobuf:"bytes,4,opt,name=ifs,proto3" json:"ifs,omitempty"`
}

func (x *Board) Reset() {
	*x = Board{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Board) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board) ProtoMessage() {}

func (x *Board) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board.ProtoReflect.Descriptor instead.
func (*Board) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{0}
}

func (x *Board) GetRfChain0() *Board_RFChain {
	if x != nil {
		return x.RfChain0
	}
	return nil
}

func (x *Board) GetRfChain1() *Board_RFChain {
	if x != nil {
		return x.RfChain1
	}
	return nil
}

func (x *Board) GetIfs() *Board_IntermediateFrequencies {
	if x != nil {
		return x.Ifs
	}
	return nil
}

type ListenBeforeTalk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RssiTarget int32 `protobuf:"varint,1,opt,name=rssi_target,json=rssiTarget,proto3" json:"rssi_target,omitempty"`
}

func (x *ListenBeforeTalk) Reset() {
	*x = ListenBeforeTalk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenBeforeTalk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenBeforeTalk) ProtoMessage() {}

func (x *ListenBeforeTalk) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenBeforeTalk.ProtoReflect.Descriptor instead.
func (*ListenBeforeTalk) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{1}
}

func (x *ListenBeforeTalk) GetRssiTarget() int32 {
	if x != nil {
		return x.RssiTarget
	}
	return 0
}

type TransmitChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency in Hz.
	Frequency uint64                            `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Bandwidth Bandwidth                         `protobuf:"varint,2,opt,name=bandwidth,proto3,enum=tti.gateway.data.lora.v1.Bandwidth" json:"bandwidth,omitempty"`
	Lbt       *TransmitChannel_ListenBeforeTalk `protobuf:"bytes,3,opt,name=lbt,proto3" json:"lbt,omitempty"`
}

func (x *TransmitChannel) Reset() {
	*x = TransmitChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitChannel) ProtoMessage() {}

func (x *TransmitChannel) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitChannel.ProtoReflect.Descriptor instead.
func (*TransmitChannel) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{2}
}

func (x *TransmitChannel) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *TransmitChannel) GetBandwidth() Bandwidth {
	if x != nil {
		return x.Bandwidth
	}
	return Bandwidth_BANDWIDTH_UNSPECIFIED
}

func (x *TransmitChannel) GetLbt() *TransmitChannel_ListenBeforeTalk {
	if x != nil {
		return x.Lbt
	}
	return nil
}

type GatewayConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpectralScan *GatewayConfig_SpectralScan `protobuf:"bytes,1,opt,name=spectral_scan,json=spectralScan,proto3" json:"spectral_scan,omitempty"`
	Boards       []*Board                    `protobuf:"bytes,2,rep,name=boards,proto3" json:"boards,omitempty"`
	Lbt          *ListenBeforeTalk           `protobuf:"bytes,3,opt,name=lbt,proto3" json:"lbt,omitempty"`
	// Transmit channels (maximum is 16).
	Tx []*TransmitChannel `protobuf:"bytes,4,rep,name=tx,proto3" json:"tx,omitempty"`
}

func (x *GatewayConfig) Reset() {
	*x = GatewayConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfig) ProtoMessage() {}

func (x *GatewayConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfig.ProtoReflect.Descriptor instead.
func (*GatewayConfig) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{3}
}

func (x *GatewayConfig) GetSpectralScan() *GatewayConfig_SpectralScan {
	if x != nil {
		return x.SpectralScan
	}
	return nil
}

func (x *GatewayConfig) GetBoards() []*Board {
	if x != nil {
		return x.Boards
	}
	return nil
}

func (x *GatewayConfig) GetLbt() *ListenBeforeTalk {
	if x != nil {
		return x.Lbt
	}
	return nil
}

func (x *GatewayConfig) GetTx() []*TransmitChannel {
	if x != nil {
		return x.Tx
	}
	return nil
}

type UplinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Board     uint32 `protobuf:"varint,1,opt,name=board,proto3" json:"board,omitempty"`
	IfChain   uint32 `protobuf:"varint,2,opt,name=if_chain,json=ifChain,proto3" json:"if_chain,omitempty"`
	Timestamp uint32 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to RssiChannel:
	//
	//	*UplinkMessage_RssiChannelNegatedDeprecated
	//	*UplinkMessage_RssiChannelNegated
	RssiChannel isUplinkMessage_RssiChannel `protobuf_oneof:"rssi_channel"`
	// Types that are assignable to DataRate:
	//
	//	*UplinkMessage_Lora_
	//	*UplinkMessage_Fsk
	DataRate isUplinkMessage_DataRate `protobuf_oneof:"data_rate"`
	Payload  []byte                   `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *UplinkMessage) Reset() {
	*x = UplinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkMessage) ProtoMessage() {}

func (x *UplinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkMessage.ProtoReflect.Descriptor instead.
func (*UplinkMessage) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{4}
}

func (x *UplinkMessage) GetBoard() uint32 {
	if x != nil {
		return x.Board
	}
	return 0
}

func (x *UplinkMessage) GetIfChain() uint32 {
	if x != nil {
		return x.IfChain
	}
	return 0
}

func (x *UplinkMessage) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (m *UplinkMessage) GetRssiChannel() isUplinkMessage_RssiChannel {
	if m != nil {
		return m.RssiChannel
	}
	return nil
}

func (x *UplinkMessage) GetRssiChannelNegatedDeprecated() float32 {
	if x, ok := x.GetRssiChannel().(*UplinkMessage_RssiChannelNegatedDeprecated); ok {
		return x.RssiChannelNegatedDeprecated
	}
	return 0
}

func (x *UplinkMessage) GetRssiChannelNegated() uint32 {
	if x, ok := x.GetRssiChannel().(*UplinkMessage_RssiChannelNegated); ok {
		return x.RssiChannelNegated
	}
	return 0
}

func (m *UplinkMessage) GetDataRate() isUplinkMessage_DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (x *UplinkMessage) GetLora() *UplinkMessage_Lora {
	if x, ok := x.GetDataRate().(*UplinkMessage_Lora_); ok {
		return x.Lora
	}
	return nil
}

func (x *UplinkMessage) GetFsk() *UplinkMessage_FSK {
	if x, ok := x.GetDataRate().(*UplinkMessage_Fsk); ok {
		return x.Fsk
	}
	return nil
}

func (x *UplinkMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type isUplinkMessage_RssiChannel interface {
	isUplinkMessage_RssiChannel()
}

type UplinkMessage_RssiChannelNegatedDeprecated struct {
	RssiChannelNegatedDeprecated float32 `protobuf:"fixed32,4,opt,name=rssi_channel_negated_deprecated,json=rssiChannelNegatedDeprecated,proto3,oneof"`
}

type UplinkMessage_RssiChannelNegated struct {
	RssiChannelNegated uint32 `protobuf:"varint,5,opt,name=rssi_channel_negated,json=rssiChannelNegated,proto3,oneof"`
}

func (*UplinkMessage_RssiChannelNegatedDeprecated) isUplinkMessage_RssiChannel() {}

func (*UplinkMessage_RssiChannelNegated) isUplinkMessage_RssiChannel() {}

type isUplinkMessage_DataRate interface {
	isUplinkMessage_DataRate()
}

type UplinkMessage_Lora_ struct {
	Lora *UplinkMessage_Lora `protobuf:"bytes,6,opt,name=lora,proto3,oneof"`
}

type UplinkMessage_Fsk struct {
	Fsk *UplinkMessage_FSK `protobuf:"bytes,7,opt,name=fsk,proto3,oneof"`
}

func (*UplinkMessage_Lora_) isUplinkMessage_DataRate() {}

func (*UplinkMessage_Fsk) isUplinkMessage_DataRate() {}

type DownlinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TX power in dBm.
	TxPower uint32 `protobuf:"varint,1,opt,name=tx_power,json=txPower,proto3" json:"tx_power,omitempty"`
	// Types that are assignable to TxChannel:
	//
	//	*DownlinkMessage_TxChannelIndex
	//	*DownlinkMessage_TxChannelConfig
	TxChannel isDownlinkMessage_TxChannel `protobuf_oneof:"tx_channel"`
	Timestamp uint32                      `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to DataRate:
	//
	//	*DownlinkMessage_Lora_
	//	*DownlinkMessage_Fsk
	DataRate isDownlinkMessage_DataRate `protobuf_oneof:"data_rate"`
	Payload  []byte                     `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *DownlinkMessage) Reset() {
	*x = DownlinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkMessage) ProtoMessage() {}

func (x *DownlinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkMessage.ProtoReflect.Descriptor instead.
func (*DownlinkMessage) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{5}
}

func (x *DownlinkMessage) GetTxPower() uint32 {
	if x != nil {
		return x.TxPower
	}
	return 0
}

func (m *DownlinkMessage) GetTxChannel() isDownlinkMessage_TxChannel {
	if m != nil {
		return m.TxChannel
	}
	return nil
}

func (x *DownlinkMessage) GetTxChannelIndex() uint32 {
	if x, ok := x.GetTxChannel().(*DownlinkMessage_TxChannelIndex); ok {
		return x.TxChannelIndex
	}
	return 0
}

func (x *DownlinkMessage) GetTxChannelConfig() *TransmitChannel {
	if x, ok := x.GetTxChannel().(*DownlinkMessage_TxChannelConfig); ok {
		return x.TxChannelConfig
	}
	return nil
}

func (x *DownlinkMessage) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (m *DownlinkMessage) GetDataRate() isDownlinkMessage_DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (x *DownlinkMessage) GetLora() *DownlinkMessage_Lora {
	if x, ok := x.GetDataRate().(*DownlinkMessage_Lora_); ok {
		return x.Lora
	}
	return nil
}

func (x *DownlinkMessage) GetFsk() *DownlinkMessage_FSK {
	if x, ok := x.GetDataRate().(*DownlinkMessage_Fsk); ok {
		return x.Fsk
	}
	return nil
}

func (x *DownlinkMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type isDownlinkMessage_TxChannel interface {
	isDownlinkMessage_TxChannel()
}

type DownlinkMessage_TxChannelIndex struct {
	TxChannelIndex uint32 `protobuf:"varint,2,opt,name=tx_channel_index,json=txChannelIndex,proto3,oneof"`
}

type DownlinkMessage_TxChannelConfig struct {
	TxChannelConfig *TransmitChannel `protobuf:"bytes,7,opt,name=tx_channel_config,json=txChannelConfig,proto3,oneof"`
}

func (*DownlinkMessage_TxChannelIndex) isDownlinkMessage_TxChannel() {}

func (*DownlinkMessage_TxChannelConfig) isDownlinkMessage_TxChannel() {}

type isDownlinkMessage_DataRate interface {
	isDownlinkMessage_DataRate()
}

type DownlinkMessage_Lora_ struct {
	Lora *DownlinkMessage_Lora `protobuf:"bytes,4,opt,name=lora,proto3,oneof"`
}

type DownlinkMessage_Fsk struct {
	Fsk *DownlinkMessage_FSK `protobuf:"bytes,5,opt,name=fsk,proto3,oneof"`
}

func (*DownlinkMessage_Lora_) isDownlinkMessage_DataRate() {}

func (*DownlinkMessage_Fsk) isDownlinkMessage_DataRate() {}

type Board_RFChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency in Hz.
	Frequency uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *Board_RFChain) Reset() {
	*x = Board_RFChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Board_RFChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board_RFChain) ProtoMessage() {}

func (x *Board_RFChain) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board_RFChain.ProtoReflect.Descriptor instead.
func (*Board_RFChain) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Board_RFChain) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

type Board_IntermediateFrequencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa multi-SF (IF chain 0).
	MultipleSf0 *Board_IntermediateFrequencies_MultipleSF `protobuf:"bytes,1,opt,name=multiple_sf0,json=multipleSf0,proto3" json:"multiple_sf0,omitempty"`
	// LoRa multi-SF (IF chain 1).
	MultipleSf1 *Board_IntermediateFrequencies_MultipleSF `protobuf:"bytes,2,opt,name=multiple_sf1,json=multipleSf1,proto3" json:"multiple_sf1,omitempty"`
	// LoRa multi-SF (IF chain 2).
	MultipleSf2 *Board_IntermediateFrequencies_MultipleSF `protobuf:"bytes,3,opt,name=multiple_sf2,json=multipleSf2,proto3" json:"multiple_sf2,omitempty"`
	// LoRa multi-SF (IF chain 3).
	MultipleSf3 *Board_IntermediateFrequencies_MultipleSF `protobuf:"bytes,4,opt,name=multiple_sf3,json=multipleSf3,proto3" json:"multiple_sf3,omitempty"`
	// LoRa multi-SF (IF chain 4).
	MultipleSf4 *Board_IntermediateFrequencies_MultipleSF `protobuf:"bytes,5,opt,name=multiple_sf4,json=multipleSf4,proto3" json:"multiple_sf4,omitempty"`
	// LoRa multi-SF (IF chain 5).
	MultipleSf5 *Board_IntermediateFrequencies_MultipleSF `protobuf:"bytes,6,opt,name=multiple_sf5,json=multipleSf5,proto3" json:"multiple_sf5,omitempty"`
	// LoRa multi-SF (IF chain 6).
	MultipleSf6 *Board_IntermediateFrequencies_MultipleSF `protobuf:"bytes,7,opt,name=multiple_sf6,json=multipleSf6,proto3" json:"multiple_sf6,omitempty"`
	// LoRa multi-SF (IF chain 7).
	MultipleSf7 *Board_IntermediateFrequencies_MultipleSF `protobuf:"bytes,8,opt,name=multiple_sf7,json=multipleSf7,proto3" json:"multiple_sf7,omitempty"`
	// FSK (IF chain 8).
	Fsk *Board_IntermediateFrequencies_FSK `protobuf:"bytes,9,opt,name=fsk,proto3" json:"fsk,omitempty"`
	// LoRa Service Channel (IF chain 9).
	LoraServiceChannel *Board_IntermediateFrequencies_LoraServiceChannel `protobuf:"bytes,10,opt,name=lora_service_channel,json=loraServiceChannel,proto3" json:"lora_service_channel,omitempty"`
}

func (x *Board_IntermediateFrequencies) Reset() {
	*x = Board_IntermediateFrequencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Board_IntermediateFrequencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board_IntermediateFrequencies) ProtoMessage() {}

func (x *Board_IntermediateFrequencies) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board_IntermediateFrequencies.ProtoReflect.Descriptor instead.
func (*Board_IntermediateFrequencies) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Board_IntermediateFrequencies) GetMultipleSf0() *Board_IntermediateFrequencies_MultipleSF {
	if x != nil {
		return x.MultipleSf0
	}
	return nil
}

func (x *Board_IntermediateFrequencies) GetMultipleSf1() *Board_IntermediateFrequencies_MultipleSF {
	if x != nil {
		return x.MultipleSf1
	}
	return nil
}

func (x *Board_IntermediateFrequencies) GetMultipleSf2() *Board_IntermediateFrequencies_MultipleSF {
	if x != nil {
		return x.MultipleSf2
	}
	return nil
}

func (x *Board_IntermediateFrequencies) GetMultipleSf3() *Board_IntermediateFrequencies_MultipleSF {
	if x != nil {
		return x.MultipleSf3
	}
	return nil
}

func (x *Board_IntermediateFrequencies) GetMultipleSf4() *Board_IntermediateFrequencies_MultipleSF {
	if x != nil {
		return x.MultipleSf4
	}
	return nil
}

func (x *Board_IntermediateFrequencies) GetMultipleSf5() *Board_IntermediateFrequencies_MultipleSF {
	if x != nil {
		return x.MultipleSf5
	}
	return nil
}

func (x *Board_IntermediateFrequencies) GetMultipleSf6() *Board_IntermediateFrequencies_MultipleSF {
	if x != nil {
		return x.MultipleSf6
	}
	return nil
}

func (x *Board_IntermediateFrequencies) GetMultipleSf7() *Board_IntermediateFrequencies_MultipleSF {
	if x != nil {
		return x.MultipleSf7
	}
	return nil
}

func (x *Board_IntermediateFrequencies) GetFsk() *Board_IntermediateFrequencies_FSK {
	if x != nil {
		return x.Fsk
	}
	return nil
}

func (x *Board_IntermediateFrequencies) GetLoraServiceChannel() *Board_IntermediateFrequencies_LoraServiceChannel {
	if x != nil {
		return x.LoraServiceChannel
	}
	return nil
}

type Board_IntermediateFrequencies_MultipleSF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RfChain uint32 `protobuf:"varint,1,opt,name=rf_chain,json=rfChain,proto3" json:"rf_chain,omitempty"`
	// Frequency in Hz. Relative to RF chain frequency.
	Frequency int32 `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *Board_IntermediateFrequencies_MultipleSF) Reset() {
	*x = Board_IntermediateFrequencies_MultipleSF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Board_IntermediateFrequencies_MultipleSF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board_IntermediateFrequencies_MultipleSF) ProtoMessage() {}

func (x *Board_IntermediateFrequencies_MultipleSF) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board_IntermediateFrequencies_MultipleSF.ProtoReflect.Descriptor instead.
func (*Board_IntermediateFrequencies_MultipleSF) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Board_IntermediateFrequencies_MultipleSF) GetRfChain() uint32 {
	if x != nil {
		return x.RfChain
	}
	return 0
}

func (x *Board_IntermediateFrequencies_MultipleSF) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

type Board_IntermediateFrequencies_FSK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RfChain uint32 `protobuf:"varint,1,opt,name=rf_chain,json=rfChain,proto3" json:"rf_chain,omitempty"`
	// Frequency in Hz. Relative to RF chain frequency.
	Frequency int32     `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Bandwidth Bandwidth `protobuf:"varint,3,opt,name=bandwidth,proto3,enum=tti.gateway.data.lora.v1.Bandwidth" json:"bandwidth,omitempty"`
	Bitrate   uint32    `protobuf:"varint,4,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
}

func (x *Board_IntermediateFrequencies_FSK) Reset() {
	*x = Board_IntermediateFrequencies_FSK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Board_IntermediateFrequencies_FSK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board_IntermediateFrequencies_FSK) ProtoMessage() {}

func (x *Board_IntermediateFrequencies_FSK) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board_IntermediateFrequencies_FSK.ProtoReflect.Descriptor instead.
func (*Board_IntermediateFrequencies_FSK) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Board_IntermediateFrequencies_FSK) GetRfChain() uint32 {
	if x != nil {
		return x.RfChain
	}
	return 0
}

func (x *Board_IntermediateFrequencies_FSK) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *Board_IntermediateFrequencies_FSK) GetBandwidth() Bandwidth {
	if x != nil {
		return x.Bandwidth
	}
	return Bandwidth_BANDWIDTH_UNSPECIFIED
}

func (x *Board_IntermediateFrequencies_FSK) GetBitrate() uint32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

type Board_IntermediateFrequencies_LoraServiceChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RfChain uint32 `protobuf:"varint,1,opt,name=rf_chain,json=rfChain,proto3" json:"rf_chain,omitempty"`
	// Frequency in Hz. Relative to RF chain frequency.
	Frequency       int32     `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Bandwidth       Bandwidth `protobuf:"varint,3,opt,name=bandwidth,proto3,enum=tti.gateway.data.lora.v1.Bandwidth" json:"bandwidth,omitempty"`
	SpreadingFactor uint32    `protobuf:"varint,4,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
}

func (x *Board_IntermediateFrequencies_LoraServiceChannel) Reset() {
	*x = Board_IntermediateFrequencies_LoraServiceChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Board_IntermediateFrequencies_LoraServiceChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board_IntermediateFrequencies_LoraServiceChannel) ProtoMessage() {}

func (x *Board_IntermediateFrequencies_LoraServiceChannel) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board_IntermediateFrequencies_LoraServiceChannel.ProtoReflect.Descriptor instead.
func (*Board_IntermediateFrequencies_LoraServiceChannel) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *Board_IntermediateFrequencies_LoraServiceChannel) GetRfChain() uint32 {
	if x != nil {
		return x.RfChain
	}
	return 0
}

func (x *Board_IntermediateFrequencies_LoraServiceChannel) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *Board_IntermediateFrequencies_LoraServiceChannel) GetBandwidth() Bandwidth {
	if x != nil {
		return x.Bandwidth
	}
	return Bandwidth_BANDWIDTH_UNSPECIFIED
}

func (x *Board_IntermediateFrequencies_LoraServiceChannel) GetSpreadingFactor() uint32 {
	if x != nil {
		return x.SpreadingFactor
	}
	return 0
}

type TransmitChannel_ListenBeforeTalk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanTime     TransmitChannel_ListenBeforeTalk_ScanTime `protobuf:"varint,2,opt,name=scan_time,json=scanTime,proto3,enum=tti.gateway.data.lora.v1.TransmitChannel_ListenBeforeTalk_ScanTime" json:"scan_time,omitempty"`
	TransmitTime *durationpb.Duration                      `protobuf:"bytes,3,opt,name=transmit_time,json=transmitTime,proto3" json:"transmit_time,omitempty"`
}

func (x *TransmitChannel_ListenBeforeTalk) Reset() {
	*x = TransmitChannel_ListenBeforeTalk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitChannel_ListenBeforeTalk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitChannel_ListenBeforeTalk) ProtoMessage() {}

func (x *TransmitChannel_ListenBeforeTalk) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitChannel_ListenBeforeTalk.ProtoReflect.Descriptor instead.
func (*TransmitChannel_ListenBeforeTalk) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TransmitChannel_ListenBeforeTalk) GetScanTime() TransmitChannel_ListenBeforeTalk_ScanTime {
	if x != nil {
		return x.ScanTime
	}
	return TransmitChannel_ListenBeforeTalk_SCAN_TIME_UNSPECIFIED
}

func (x *TransmitChannel_ListenBeforeTalk) GetTransmitTime() *durationpb.Duration {
	if x != nil {
		return x.TransmitTime
	}
	return nil
}

type GatewayConfig_SpectralScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanPoints uint32               `protobuf:"varint,1,opt,name=scan_points,json=scanPoints,proto3" json:"scan_points,omitempty"`
	Pace       *durationpb.Duration `protobuf:"bytes,2,opt,name=pace,proto3" json:"pace,omitempty"`
}

func (x *GatewayConfig_SpectralScan) Reset() {
	*x = GatewayConfig_SpectralScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfig_SpectralScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfig_SpectralScan) ProtoMessage() {}

func (x *GatewayConfig_SpectralScan) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfig_SpectralScan.ProtoReflect.Descriptor instead.
func (*GatewayConfig_SpectralScan) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GatewayConfig_SpectralScan) GetScanPoints() uint32 {
	if x != nil {
		return x.ScanPoints
	}
	return 0
}

func (x *GatewayConfig_SpectralScan) GetPace() *durationpb.Duration {
	if x != nil {
		return x.Pace
	}
	return nil
}

type UplinkMessage_Lora struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrequencyOffset int32 `protobuf:"varint,1,opt,name=frequency_offset,json=frequencyOffset,proto3" json:"frequency_offset,omitempty"`
	// Types that are assignable to RssiSignal:
	//
	//	*UplinkMessage_Lora_RssiSignalNegatedDeprecated
	//	*UplinkMessage_Lora_RssiSignalNegated
	RssiSignal isUplinkMessage_Lora_RssiSignal `protobuf_oneof:"rssi_signal"`
	// Types that are assignable to Snr:
	//
	//	*UplinkMessage_Lora_SnrPositive
	//	*UplinkMessage_Lora_SnrNegative
	Snr isUplinkMessage_Lora_Snr `protobuf_oneof:"snr"`
	// Spreading factor.
	// This field is omitted for LoRa Service Channel.
	SpreadingFactor uint32   `protobuf:"varint,5,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
	CodeRate        CodeRate `protobuf:"varint,6,opt,name=code_rate,json=codeRate,proto3,enum=tti.gateway.data.lora.v1.CodeRate" json:"code_rate,omitempty"`
}

func (x *UplinkMessage_Lora) Reset() {
	*x = UplinkMessage_Lora{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkMessage_Lora) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkMessage_Lora) ProtoMessage() {}

func (x *UplinkMessage_Lora) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkMessage_Lora.ProtoReflect.Descriptor instead.
func (*UplinkMessage_Lora) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{4, 0}
}

func (x *UplinkMessage_Lora) GetFrequencyOffset() int32 {
	if x != nil {
		return x.FrequencyOffset
	}
	return 0
}

func (m *UplinkMessage_Lora) GetRssiSignal() isUplinkMessage_Lora_RssiSignal {
	if m != nil {
		return m.RssiSignal
	}
	return nil
}

func (x *UplinkMessage_Lora) GetRssiSignalNegatedDeprecated() float32 {
	if x, ok := x.GetRssiSignal().(*UplinkMessage_Lora_RssiSignalNegatedDeprecated); ok {
		return x.RssiSignalNegatedDeprecated
	}
	return 0
}

func (x *UplinkMessage_Lora) GetRssiSignalNegated() uint32 {
	if x, ok := x.GetRssiSignal().(*UplinkMessage_Lora_RssiSignalNegated); ok {
		return x.RssiSignalNegated
	}
	return 0
}

func (m *UplinkMessage_Lora) GetSnr() isUplinkMessage_Lora_Snr {
	if m != nil {
		return m.Snr
	}
	return nil
}

func (x *UplinkMessage_Lora) GetSnrPositive() float32 {
	if x, ok := x.GetSnr().(*UplinkMessage_Lora_SnrPositive); ok {
		return x.SnrPositive
	}
	return 0
}

func (x *UplinkMessage_Lora) GetSnrNegative() float32 {
	if x, ok := x.GetSnr().(*UplinkMessage_Lora_SnrNegative); ok {
		return x.SnrNegative
	}
	return 0
}

func (x *UplinkMessage_Lora) GetSpreadingFactor() uint32 {
	if x != nil {
		return x.SpreadingFactor
	}
	return 0
}

func (x *UplinkMessage_Lora) GetCodeRate() CodeRate {
	if x != nil {
		return x.CodeRate
	}
	return CodeRate_CODE_RATE_4_5
}

type isUplinkMessage_Lora_RssiSignal interface {
	isUplinkMessage_Lora_RssiSignal()
}

type UplinkMessage_Lora_RssiSignalNegatedDeprecated struct {
	RssiSignalNegatedDeprecated float32 `protobuf:"fixed32,2,opt,name=rssi_signal_negated_deprecated,json=rssiSignalNegatedDeprecated,proto3,oneof"`
}

type UplinkMessage_Lora_RssiSignalNegated struct {
	RssiSignalNegated uint32 `protobuf:"varint,7,opt,name=rssi_signal_negated,json=rssiSignalNegated,proto3,oneof"`
}

func (*UplinkMessage_Lora_RssiSignalNegatedDeprecated) isUplinkMessage_Lora_RssiSignal() {}

func (*UplinkMessage_Lora_RssiSignalNegated) isUplinkMessage_Lora_RssiSignal() {}

type isUplinkMessage_Lora_Snr interface {
	isUplinkMessage_Lora_Snr()
}

type UplinkMessage_Lora_SnrPositive struct {
	SnrPositive float32 `protobuf:"fixed32,3,opt,name=snr_positive,json=snrPositive,proto3,oneof"`
}

type UplinkMessage_Lora_SnrNegative struct {
	SnrNegative float32 `protobuf:"fixed32,4,opt,name=snr_negative,json=snrNegative,proto3,oneof"`
}

func (*UplinkMessage_Lora_SnrPositive) isUplinkMessage_Lora_Snr() {}

func (*UplinkMessage_Lora_SnrNegative) isUplinkMessage_Lora_Snr() {}

type UplinkMessage_FSK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UplinkMessage_FSK) Reset() {
	*x = UplinkMessage_FSK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkMessage_FSK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkMessage_FSK) ProtoMessage() {}

func (x *UplinkMessage_FSK) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkMessage_FSK.ProtoReflect.Descriptor instead.
func (*UplinkMessage_FSK) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{4, 1}
}

type DownlinkMessage_Lora struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpreadingFactor uint32   `protobuf:"varint,1,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
	CodeRate        CodeRate `protobuf:"varint,2,opt,name=code_rate,json=codeRate,proto3,enum=tti.gateway.data.lora.v1.CodeRate" json:"code_rate,omitempty"`
	// Enable settings to transmit the message as LoRaWAN uplink message.
	// This disables inverted polarization and enables CRC.
	LorawanUplink bool `protobuf:"varint,3,opt,name=lorawan_uplink,json=lorawanUplink,proto3" json:"lorawan_uplink,omitempty"`
}

func (x *DownlinkMessage_Lora) Reset() {
	*x = DownlinkMessage_Lora{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkMessage_Lora) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkMessage_Lora) ProtoMessage() {}

func (x *DownlinkMessage_Lora) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkMessage_Lora.ProtoReflect.Descriptor instead.
func (*DownlinkMessage_Lora) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{5, 0}
}

func (x *DownlinkMessage_Lora) GetSpreadingFactor() uint32 {
	if x != nil {
		return x.SpreadingFactor
	}
	return 0
}

func (x *DownlinkMessage_Lora) GetCodeRate() CodeRate {
	if x != nil {
		return x.CodeRate
	}
	return CodeRate_CODE_RATE_4_5
}

func (x *DownlinkMessage_Lora) GetLorawanUplink() bool {
	if x != nil {
		return x.LorawanUplink
	}
	return false
}

type DownlinkMessage_FSK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bitrate uint32 `protobuf:"varint,1,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	// Frequency deviation in KHz.
	FrequencyDeviation uint32 `protobuf:"varint,2,opt,name=frequency_deviation,json=frequencyDeviation,proto3" json:"frequency_deviation,omitempty"`
}

func (x *DownlinkMessage_FSK) Reset() {
	*x = DownlinkMessage_FSK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkMessage_FSK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkMessage_FSK) ProtoMessage() {}

func (x *DownlinkMessage_FSK) ProtoReflect() protoreflect.Message {
	mi := &file_tti_gateway_data_lora_v1_lora_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkMessage_FSK.ProtoReflect.Descriptor instead.
func (*DownlinkMessage_FSK) Descriptor() ([]byte, []int) {
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP(), []int{5, 1}
}

func (x *DownlinkMessage_FSK) GetBitrate() uint32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *DownlinkMessage_FSK) GetFrequencyDeviation() uint32 {
	if x != nil {
		return x.FrequencyDeviation
	}
	return 0
}

var File_tti_gateway_data_lora_v1_lora_proto protoreflect.FileDescriptor

var file_tti_gateway_data_lora_v1_lora_proto_rawDesc = []byte{
	0x0a, 0x23, 0x74, 0x74, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x6c, 0x6f, 0x72, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcb, 0x0d, 0x0a, 0x05, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x66, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74,
	0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x46,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x72, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x30, 0x12,
	0x44, 0x0a, 0x09, 0x72, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x52, 0x46, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x72, 0x66, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x31, 0x12, 0x49, 0x0a, 0x03, 0x69, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x03, 0x69, 0x66, 0x73,
	0x1a, 0x27, 0x0a, 0x07, 0x52, 0x46, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0xc1, 0x0b, 0x0a, 0x17, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x5f, 0x73, 0x66, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x74,
	0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c,
	0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x46, 0x52,
	0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x66, 0x30, 0x12, 0x65, 0x0a, 0x0c,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x66, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x53, 0x46, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x53, 0x66, 0x31, 0x12, 0x65, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f,
	0x73, 0x66, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x74, 0x69, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x46, 0x52, 0x0b, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x66, 0x32, 0x12, 0x65, 0x0a, 0x0c, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x66, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x53, 0x46, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x66,
	0x33, 0x12, 0x65, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x66,
	0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x46, 0x52, 0x0b, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x66, 0x34, 0x12, 0x65, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x66, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x53, 0x46, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x66, 0x35, 0x12,
	0x65, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x66, 0x36, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x46, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x53, 0x66, 0x36, 0x12, 0x65, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x5f, 0x73, 0x66, 0x37, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74,
	0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x46,
	0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x66, 0x37, 0x12, 0x4d, 0x0a,
	0x03, 0x66, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x74, 0x69,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f,
	0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x2e, 0x46, 0x53, 0x4b, 0x52, 0x03, 0x66, 0x73, 0x6b, 0x12, 0x7c, 0x0a, 0x14,
	0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x74, 0x74, 0x69,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f,
	0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x12, 0x6c, 0x6f, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x45, 0x0a, 0x0a, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x46, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x66, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x66, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x1a, 0x9b, 0x01, 0x0a, 0x03, 0x46, 0x53, 0x4b, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x66, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x66, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x1a,
	0xbb, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x66, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x66, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x41, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x33, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x6c,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x73, 0x73, 0x69, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0xcb, 0x03, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x03, 0x6c, 0x62, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x6c, 0x6b,
	0x52, 0x03, 0x6c, 0x62, 0x74, 0x1a, 0x88, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x60, 0x0a, 0x09, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e,
	0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x08,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4e,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x31, 0x32, 0x38, 0x5f, 0x55, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x35, 0x30, 0x30, 0x30, 0x5f, 0x55, 0x53, 0x10, 0x02,
	0x22, 0xfc, 0x02, 0x0a, 0x0d, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x59, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x63, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x74, 0x69, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x0c, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x37, 0x0a,
	0x06, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x06,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x6c, 0x62, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x52,
	0x03, 0x6c, 0x62, 0x74, 0x12, 0x39, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x02, 0x74, 0x78, 0x1a,
	0x5e, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x2d, 0x0a, 0x04, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x97, 0x06, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x66, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x47, 0x0a, 0x1f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x73, 0x73,
	0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x73, 0x73,
	0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x12, 0x72, 0x73, 0x73, 0x69, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a,
	0x04, 0x6c, 0x6f, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x74,
	0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c,
	0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x72, 0x61, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x72,
	0x61, 0x12, 0x3f, 0x0a, 0x03, 0x66, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x53, 0x4b, 0x48, 0x01, 0x52, 0x03, 0x66,
	0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xf6, 0x02, 0x0a,
	0x04, 0x4c, 0x6f, 0x72, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x45, 0x0a, 0x1e, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x73, 0x73, 0x69,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x73, 0x73, 0x69, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x11, 0x72, 0x73, 0x73, 0x69, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x6e, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x01, 0x52, 0x0b, 0x73, 0x6e, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x6e, 0x72, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x6e, 0x72, 0x4e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3f,
	0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42, 0x05,
	0x0a, 0x03, 0x73, 0x6e, 0x72, 0x1a, 0x05, 0x0a, 0x03, 0x46, 0x53, 0x4b, 0x42, 0x0e, 0x0a, 0x0c,
	0x72, 0x73, 0x73, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x22, 0xfb, 0x04, 0x0a, 0x0f, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x78,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x04, 0x6c,
	0x6f, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x74, 0x69, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x72, 0x61, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x72,
	0x61, 0x12, 0x41, 0x0a, 0x03, 0x66, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x53, 0x4b, 0x48, 0x01, 0x52,
	0x03, 0x66, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x99,
	0x01, 0x0a, 0x04, 0x4c, 0x6f, 0x72, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61, 0x6e, 0x5f, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x72,
	0x61, 0x77, 0x61, 0x6e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x50, 0x0a, 0x03, 0x46, 0x53,
	0x4b, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x74, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x2a, 0x6b, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54,
	0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x31, 0x32, 0x35,
	0x5f, 0x4b, 0x48, 0x5a, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49,
	0x44, 0x54, 0x48, 0x5f, 0x32, 0x35, 0x30, 0x5f, 0x4b, 0x48, 0x5a, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x35, 0x30, 0x30, 0x5f, 0x4b,
	0x48, 0x5a, 0x10, 0x03, 0x2a, 0x56, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x34, 0x5f,
	0x35, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x34, 0x5f, 0x36, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x34, 0x5f, 0x37, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x34, 0x5f, 0x38, 0x10, 0x03, 0x42, 0xef, 0x01, 0x0a,
	0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x74, 0x69, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x4c,
	0x6f, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x6f, 0x2e, 0x74,
	0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x74, 0x69, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6c, 0x6f, 0x72,
	0x61, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x6f, 0x72, 0x61, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x54, 0x47,
	0x44, 0x4c, 0xaa, 0x02, 0x18, 0x54, 0x74, 0x69, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x72, 0x61, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18,
	0x54, 0x74, 0x69, 0x5c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5c, 0x44, 0x61, 0x74, 0x61,
	0x5c, 0x4c, 0x6f, 0x72, 0x61, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24, 0x54, 0x74, 0x69, 0x5c, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x5c, 0x4c, 0x6f, 0x72, 0x61,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1c, 0x54, 0x74, 0x69, 0x3a, 0x3a, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x3a, 0x3a,
	0x44, 0x61, 0x74, 0x61, 0x3a, 0x3a, 0x4c, 0x6f, 0x72, 0x61, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tti_gateway_data_lora_v1_lora_proto_rawDescOnce sync.Once
	file_tti_gateway_data_lora_v1_lora_proto_rawDescData = file_tti_gateway_data_lora_v1_lora_proto_rawDesc
)

func file_tti_gateway_data_lora_v1_lora_proto_rawDescGZIP() []byte {
	file_tti_gateway_data_lora_v1_lora_proto_rawDescOnce.Do(func() {
		file_tti_gateway_data_lora_v1_lora_proto_rawDescData = protoimpl.X.CompressGZIP(file_tti_gateway_data_lora_v1_lora_proto_rawDescData)
	})
	return file_tti_gateway_data_lora_v1_lora_proto_rawDescData
}

var file_tti_gateway_data_lora_v1_lora_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tti_gateway_data_lora_v1_lora_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_tti_gateway_data_lora_v1_lora_proto_goTypes = []interface{}{
	(Bandwidth)(0), // 0: tti.gateway.data.lora.v1.Bandwidth
	(CodeRate)(0),  // 1: tti.gateway.data.lora.v1.CodeRate
	(TransmitChannel_ListenBeforeTalk_ScanTime)(0), // 2: tti.gateway.data.lora.v1.TransmitChannel.ListenBeforeTalk.ScanTime
	(*Board)(nil),                                            // 3: tti.gateway.data.lora.v1.Board
	(*ListenBeforeTalk)(nil),                                 // 4: tti.gateway.data.lora.v1.ListenBeforeTalk
	(*TransmitChannel)(nil),                                  // 5: tti.gateway.data.lora.v1.TransmitChannel
	(*GatewayConfig)(nil),                                    // 6: tti.gateway.data.lora.v1.GatewayConfig
	(*UplinkMessage)(nil),                                    // 7: tti.gateway.data.lora.v1.UplinkMessage
	(*DownlinkMessage)(nil),                                  // 8: tti.gateway.data.lora.v1.DownlinkMessage
	(*Board_RFChain)(nil),                                    // 9: tti.gateway.data.lora.v1.Board.RFChain
	(*Board_IntermediateFrequencies)(nil),                    // 10: tti.gateway.data.lora.v1.Board.IntermediateFrequencies
	(*Board_IntermediateFrequencies_MultipleSF)(nil),         // 11: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.MultipleSF
	(*Board_IntermediateFrequencies_FSK)(nil),                // 12: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.FSK
	(*Board_IntermediateFrequencies_LoraServiceChannel)(nil), // 13: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.LoraServiceChannel
	(*TransmitChannel_ListenBeforeTalk)(nil),                 // 14: tti.gateway.data.lora.v1.TransmitChannel.ListenBeforeTalk
	(*GatewayConfig_SpectralScan)(nil),                       // 15: tti.gateway.data.lora.v1.GatewayConfig.SpectralScan
	(*UplinkMessage_Lora)(nil),                               // 16: tti.gateway.data.lora.v1.UplinkMessage.Lora
	(*UplinkMessage_FSK)(nil),                                // 17: tti.gateway.data.lora.v1.UplinkMessage.FSK
	(*DownlinkMessage_Lora)(nil),                             // 18: tti.gateway.data.lora.v1.DownlinkMessage.Lora
	(*DownlinkMessage_FSK)(nil),                              // 19: tti.gateway.data.lora.v1.DownlinkMessage.FSK
	(*durationpb.Duration)(nil),                              // 20: google.protobuf.Duration
}
var file_tti_gateway_data_lora_v1_lora_proto_depIdxs = []int32{
	9,  // 0: tti.gateway.data.lora.v1.Board.rf_chain0:type_name -> tti.gateway.data.lora.v1.Board.RFChain
	9,  // 1: tti.gateway.data.lora.v1.Board.rf_chain1:type_name -> tti.gateway.data.lora.v1.Board.RFChain
	10, // 2: tti.gateway.data.lora.v1.Board.ifs:type_name -> tti.gateway.data.lora.v1.Board.IntermediateFrequencies
	0,  // 3: tti.gateway.data.lora.v1.TransmitChannel.bandwidth:type_name -> tti.gateway.data.lora.v1.Bandwidth
	14, // 4: tti.gateway.data.lora.v1.TransmitChannel.lbt:type_name -> tti.gateway.data.lora.v1.TransmitChannel.ListenBeforeTalk
	15, // 5: tti.gateway.data.lora.v1.GatewayConfig.spectral_scan:type_name -> tti.gateway.data.lora.v1.GatewayConfig.SpectralScan
	3,  // 6: tti.gateway.data.lora.v1.GatewayConfig.boards:type_name -> tti.gateway.data.lora.v1.Board
	4,  // 7: tti.gateway.data.lora.v1.GatewayConfig.lbt:type_name -> tti.gateway.data.lora.v1.ListenBeforeTalk
	5,  // 8: tti.gateway.data.lora.v1.GatewayConfig.tx:type_name -> tti.gateway.data.lora.v1.TransmitChannel
	16, // 9: tti.gateway.data.lora.v1.UplinkMessage.lora:type_name -> tti.gateway.data.lora.v1.UplinkMessage.Lora
	17, // 10: tti.gateway.data.lora.v1.UplinkMessage.fsk:type_name -> tti.gateway.data.lora.v1.UplinkMessage.FSK
	5,  // 11: tti.gateway.data.lora.v1.DownlinkMessage.tx_channel_config:type_name -> tti.gateway.data.lora.v1.TransmitChannel
	18, // 12: tti.gateway.data.lora.v1.DownlinkMessage.lora:type_name -> tti.gateway.data.lora.v1.DownlinkMessage.Lora
	19, // 13: tti.gateway.data.lora.v1.DownlinkMessage.fsk:type_name -> tti.gateway.data.lora.v1.DownlinkMessage.FSK
	11, // 14: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.multiple_sf0:type_name -> tti.gateway.data.lora.v1.Board.IntermediateFrequencies.MultipleSF
	11, // 15: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.multiple_sf1:type_name -> tti.gateway.data.lora.v1.Board.IntermediateFrequencies.MultipleSF
	11, // 16: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.multiple_sf2:type_name -> tti.gateway.data.lora.v1.Board.IntermediateFrequencies.MultipleSF
	11, // 17: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.multiple_sf3:type_name -> tti.gateway.data.lora.v1.Board.IntermediateFrequencies.MultipleSF
	11, // 18: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.multiple_sf4:type_name -> tti.gateway.data.lora.v1.Board.IntermediateFrequencies.MultipleSF
	11, // 19: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.multiple_sf5:type_name -> tti.gateway.data.lora.v1.Board.IntermediateFrequencies.MultipleSF
	11, // 20: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.multiple_sf6:type_name -> tti.gateway.data.lora.v1.Board.IntermediateFrequencies.MultipleSF
	11, // 21: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.multiple_sf7:type_name -> tti.gateway.data.lora.v1.Board.IntermediateFrequencies.MultipleSF
	12, // 22: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.fsk:type_name -> tti.gateway.data.lora.v1.Board.IntermediateFrequencies.FSK
	13, // 23: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.lora_service_channel:type_name -> tti.gateway.data.lora.v1.Board.IntermediateFrequencies.LoraServiceChannel
	0,  // 24: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.FSK.bandwidth:type_name -> tti.gateway.data.lora.v1.Bandwidth
	0,  // 25: tti.gateway.data.lora.v1.Board.IntermediateFrequencies.LoraServiceChannel.bandwidth:type_name -> tti.gateway.data.lora.v1.Bandwidth
	2,  // 26: tti.gateway.data.lora.v1.TransmitChannel.ListenBeforeTalk.scan_time:type_name -> tti.gateway.data.lora.v1.TransmitChannel.ListenBeforeTalk.ScanTime
	20, // 27: tti.gateway.data.lora.v1.TransmitChannel.ListenBeforeTalk.transmit_time:type_name -> google.protobuf.Duration
	20, // 28: tti.gateway.data.lora.v1.GatewayConfig.SpectralScan.pace:type_name -> google.protobuf.Duration
	1,  // 29: tti.gateway.data.lora.v1.UplinkMessage.Lora.code_rate:type_name -> tti.gateway.data.lora.v1.CodeRate
	1,  // 30: tti.gateway.data.lora.v1.DownlinkMessage.Lora.code_rate:type_name -> tti.gateway.data.lora.v1.CodeRate
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_tti_gateway_data_lora_v1_lora_proto_init() }
func file_tti_gateway_data_lora_v1_lora_proto_init() {
	if File_tti_gateway_data_lora_v1_lora_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Board); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenBeforeTalk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Board_RFChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Board_IntermediateFrequencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Board_IntermediateFrequencies_MultipleSF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Board_IntermediateFrequencies_FSK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Board_IntermediateFrequencies_LoraServiceChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitChannel_ListenBeforeTalk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfig_SpectralScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkMessage_Lora); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkMessage_FSK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkMessage_Lora); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tti_gateway_data_lora_v1_lora_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkMessage_FSK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tti_gateway_data_lora_v1_lora_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*UplinkMessage_RssiChannelNegatedDeprecated)(nil),
		(*UplinkMessage_RssiChannelNegated)(nil),
		(*UplinkMessage_Lora_)(nil),
		(*UplinkMessage_Fsk)(nil),
	}
	file_tti_gateway_data_lora_v1_lora_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DownlinkMessage_TxChannelIndex)(nil),
		(*DownlinkMessage_TxChannelConfig)(nil),
		(*DownlinkMessage_Lora_)(nil),
		(*DownlinkMessage_Fsk)(nil),
	}
	file_tti_gateway_data_lora_v1_lora_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*UplinkMessage_Lora_RssiSignalNegatedDeprecated)(nil),
		(*UplinkMessage_Lora_RssiSignalNegated)(nil),
		(*UplinkMessage_Lora_SnrPositive)(nil),
		(*UplinkMessage_Lora_SnrNegative)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tti_gateway_data_lora_v1_lora_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tti_gateway_data_lora_v1_lora_proto_goTypes,
		DependencyIndexes: file_tti_gateway_data_lora_v1_lora_proto_depIdxs,
		EnumInfos:         file_tti_gateway_data_lora_v1_lora_proto_enumTypes,
		MessageInfos:      file_tti_gateway_data_lora_v1_lora_proto_msgTypes,
	}.Build()
	File_tti_gateway_data_lora_v1_lora_proto = out.File
	file_tti_gateway_data_lora_v1_lora_proto_rawDesc = nil
	file_tti_gateway_data_lora_v1_lora_proto_goTypes = nil
	file_tti_gateway_data_lora_v1_lora_proto_depIdxs = nil
}
